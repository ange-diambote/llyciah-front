{"version":3,"sources":["app/chat/components/assets/clear-button.svg","app/login/logo.png","app/header/logo.png","app/home/background.jpg","app/chat/components/assets/launcher_button.svg","app/chat/components/assets/send_button.svg","i18n/LanguageSwitcher.tsx","app/common/Centered.tsx","app/powered/Powered.tsx","cuba/entities/base/sys$BaseGenericIdEntity.ts","cuba/entities/base/sys$BaseUuidEntity.ts","cuba/entities/base/sys$StandardEntity.ts","cuba/entities/tagency_Customer.ts","cuba/services.ts","app/login/register/Register.tsx","app/login/reset/Reset.tsx","app/login/Login.tsx","app/header/password/Password.tsx","app/header/AppHeader.tsx","app/home/HomePage.tsx","cuba/entities/tagency_Price.ts","app/price/PriceCards.tsx","cuba/entities/tagency_Transction.ts","app/transaction/TransctionEdit.tsx","app/transaction/TransctionList.tsx","app/transaction/TransctionManagement.tsx","cuba/entities/tagency_Booking.ts","cuba/entities/tagency_Service.ts","cuba/entities/tagency_Branch.ts","cuba/enums/enums.ts","app/booking/BookingEdit.tsx","app/booking/BookingList.tsx","app/booking/BookingManagement.tsx","cuba/queries.ts","app/information/Information.tsx","routing.ts","app/CenteredLoader.tsx","app/chat/utils/store.js","app/chat/store/reducers/behaviorReducer.js","app/chat/store/actions/actionTypes.js","app/chat/constants.js","app/chat/components/widget/components/Conversation/components/Messages/components/Message/index.js","app/chat/components/widget/components/Conversation/components/Messages/components/Snippet/index.js","app/chat/components/widget/components/Conversation/components/QuickButtons/index.js","app/chat/utils/messages.js","app/chat/store/reducers/messagesReducer.js","app/chat/store/reducers/quickButtonsReducer.js","app/chat/store/store.ts","app/chat/store/dispatcher.js","app/chat/store/actions/index.js","app/chat/components/widget/components/Launcher/components/Badge/index.js","app/chat/components/widget/components/Launcher/index.js","app/chat/components/widget/components/Conversation/components/Header/index.js","app/chat/components/widget/components/Conversation/components/Messages/components/Loader/index.js","app/chat/components/widget/components/Conversation/components/Messages/index.js","app/chat/components/widget/components/Conversation/components/Sender/index.js","app/chat/components/widget/components/Conversation/Conversation.tsx","app/chat/components/widget/layout.tsx","app/chat/components/widget/index.js","app/chat/ConnectedWidget.tsx","app/App.tsx","i18n/i18nMappings.ts","index.tsx","config.ts"],"names":["module","exports","LanguageSwitcher","handleChange","locale","getMainStore","setLocale","defaultValue","onChange","this","size","style","props","className","Option","value","React","Component","Centered","children","width","height","display","alignItems","justifyContent","Powered","href","BaseGenericIdEntity","NAME","BaseUuidEntity","id","StandardEntity","version","createTs","createdBy","updateTs","updatedBy","deleteTs","deletedBy","Customer","code","firstName","name","lastName","email","phone","registerDate","status","account","previousStatus","marketer","birthDay","passport","placeBirth","registered","user","restServices","register","cubaApp","fetchOpts","params","invokeService","resetPassword","getUserName","changePassword","loadMessages","markAsRead","sendMessage","getUnreadCountMessage","getConnectedCustomerGroup","loadNewMessages","isConnectedCustomerMarketerOnline","Register","observer","registerService","customer","getCubaREST","dataInstance","instance","view","loadImmediately","fields","reactionDisposer","major","notMajor","date","local","isAfter","close","getFieldDecorator","form","title","layout","labelAlign","onSubmit","resgister","Item","label","rules","required","type","message","pattern","placeholder","disabledDate","showToday","globalErrors","length","lines","toJS","marginBottom","htmlType","float","onClick","loading","submited","marginLeft","moment","subtract","console","debug","observable","action","validateFields","err","error","intl","formatMessage","getFieldsValue","then","success","catch","e","response","json","clearFieldErrors","extractServerValidationErrors","fieldErrors","setFields","constructFieldsWithErrors","injectMainStore","injectIntl","withLocalizedForm","onValuesChange","changedValues","Object","keys","forEach","fieldName","Reset","resetService","login","reset","prefix","color","disabled","getFieldValue","details","Login","state","requestingRegister","requestingReset","setState","handleClose","handleNewUserMessage","msg","alert","src","logo","alt","doLogin","changeLogin","password","performingLoginRequest","target","preventDefault","mainStore","Password","changeService","oldPwd","newPwd","current","icon","showDialog","border","ghost","show","visible","onCancel","closeDialog","onOk","change","okText","cancelText","requested","validateFieldsAndScroll","AppHeader","showLogoutConfirm","Modal","confirm","logout","appState","textAlign","verticalAlign","userName","HomePage","objectFit","fontFamily","objectPosition","boxSizing","Price","service","amount","description","PriceCards","dataCollection","collection","sort","items","map","key","p","entityName","propertyName","Transction","invoice","booking","approved","settlement","debtor","creditor","reference","valueDate","related","deadline","TransctionEditComponent","item","undefined","Link","to","TransctionManagement","PATH","entityId","NEW_SUBPATH","load","TransctionListComponent","position","left","top","transform","itemLayout","bordered","dataSource","renderItem","actions","hidden","flexGrow","TransctionList","match","TransctionEdit","Booking","transaction","reason","information","branch","Service","active","Branch","location","users","AccountType","AppointmentStatus","BookingStatus","DocumentType","ServiceType","Status","TransactionType","VisitorStatus","ReadOnlyView","data","DRAFT","COMPLETED","CloseButton","BookingManagement","lableId","ServiceCascader","buildServierTree","propertyInfo","getPropertyInfoNN","metadata","enums","obj","services","push","tree","typ","childs","index","getEnumCaption","filter","inputValue","path","names","some","option","toLowerCase","indexOf","find","serv","showSearch","options","BookingEditComponent","servicesDc","branchsDc","update","updated","handleSubmit","values","Redirect","showSubmit","readonly","marginTop","formItemOpts","getFieldDecoratorOpts","max","optionsContainer","setItem","reaction","setFieldsValue","getFieldValues","instanceName","_instanceName","SUBMITTED","BookingListComponent","showDeletionDialog","selectedRowKey","delete","isSelectedDraft","getRecordById","reserve","commitEntity","book","handleRowSelectionChange","selectedRowKeys","deleteSelectedRow","buttons","margin","onRowSelectionChange","hideSelectionColumn","record","Error","BookingList","BookingEdit","restQueries","loadCustomerInformation","query","loadCustomerInformationCount","queryCount","loadCustomerInformationWithCount","queryWithCount","Information","menuItems","getMenuItems","pathPattern","menuLink","component","caption","CenteredLoader","fontSize","spin","createReducer","reducer","initialState","Map","showChat","disabledInput","msgLoader","pulse","disabledButton","behaviorReducer","MESSAGE_SENDER","MESSAGES_TYPES","LINK","ImmutablePropTypes","contains","PropTypes","oneOf","text","string","sender","link","Message","sanitizedHTML","markdownIt","breaks","use","markdownItSup","markdownItSanitizer","markdownItLinkAttributes","attrs","rel","render","get","dangerouslySetInnerHTML","__html","PureComponent","Snippet","QuickButtons","getComponentToRender","bind","button","ComponentToRender","onQuickButtonClicked","connect","store","quickButtons","createNewMessage","showAvatar","scrollToBottom","messagesDiv","screenHeight","clientHeight","scrollTop","scrollOffset","scrollHeight","scrollStart","scroll","raf","window","webkitRequestAnimationFrame","requestAnimationFrame","start","step","timestamp","t","stepScroll","total","scrollWithSlowMotion","List","messagesReducer","createLinkSnippet","createComponentMessage","set","quickButtonsReducer","QuickButton","createQuickButton","combineReducers","behavior","messages","createStore","addUserMessage","dispatch","trim","enableInput","Badge","badge","chatOpened","toggle","openLauncher","Header","subtitle","toggleChat","showCloseButton","titleAvatar","Loader","typing","Messages","$message","shouldRenderAvatar","previousMessage","profileAvatar","ref","scrollParentRef","Sender","input","createRef","event","content","buttonDisabled","toggeButtonDisabled","focus","autofocus","autoFocus","autoComplete","send","Conversation","senderPlaceHolder","WidgetLayout","fullScreenMode","onSendMessage","onToggleConversation","customLauncher","Widget","toggleConversation","handleMessageSubmit","userInput","handleQuickButtonClicked","nextProps","ConnectedWidget","launcher","AppComponent","onUserMessage","groupId","chatGroupId","cMsg","er","connectedCount","loadGroupId","checkMarketerOnline","cuba","connected","JSON","parse","markerterIsOnline","messageTimer","setInterval","clearInterval","chatData","messageIds","onlineTimer","unsubscribeStore","initialized","loginRequired","Sider","breakpoint","collapsedWidth","background","mode","borderRight","NavLink","idx","menuItem","keyString","SubMenu","ri","padding","Content","Switch","Route","exact","collectRouteItems","reduce","acc","curr","route","Footer","subscribe","opened","getState","limit","resp","App","antdLocaleMapping","en","enUs","fr","frFr","messagesMapping","cubaREST","initializeApp","apiUrl","process","storage","localStorage","ReactDOM","HashRouter","document","getElementById"],"mappings":"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","file":"static/js/main.a236ee13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear-button.d9e1613e.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.0269ee00.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.4bb12130.png\";","module.exports = __webpack_public_path__ + \"static/media/background.c16bdec2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/launcher_button.af95d0d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/send_button.6218677e.svg\";","import React, { CSSProperties } from \"react\";\r\nimport { Select } from \"antd\";\r\nimport { getMainStore } from \"@cuba-platform/react\";\r\nimport \"./LanguageSwitcher.css\";\r\n\r\nexport interface LanguageSwitcherProps {\r\n  className?: string;\r\n  style?: CSSProperties;\r\n}\r\n\r\nexport class LanguageSwitcher extends React.Component<LanguageSwitcherProps> {\r\n  handleChange = (locale: string) => {\r\n    getMainStore().setLocale(locale);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Select\r\n        defaultValue={getMainStore().locale}\r\n        onChange={this.handleChange}\r\n        size={\"small\"}\r\n        style={this.props.style}\r\n        className={this.props.className}\r\n      >\r\n        <Select.Option value=\"en\">English</Select.Option>\r\n        <Select.Option value=\"fr\">Français</Select.Option>\r\n      </Select>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\nimport { ReactNode } from \"react\";\n\nexport default function Centered({ children }: { children?: ReactNode }) {\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import * as React from \"react\";\r\nimport \"./Powered.css\"\r\nclass Powered extends React.Component {\r\n  render() {\r\n    return(\r\n    <div className='c-powered-by'>\r\n      Powered by<a href='https://softteam.tech'>SoftTeam tech</a>\r\n      </div>);\r\n  }\r\n}\r\n export default Powered;","export class BaseGenericIdEntity {\n  static NAME = \"sys$BaseGenericIdEntity\";\n}\nexport type BaseGenericIdEntityViewName = \"_minimal\" | \"_local\" | \"_base\";\nexport type BaseGenericIdEntityView<\n  V extends BaseGenericIdEntityViewName\n> = never;\n","import { BaseGenericIdEntity } from \"./sys$BaseGenericIdEntity\";\nexport class BaseUuidEntity extends BaseGenericIdEntity {\n  static NAME = \"sys$BaseUuidEntity\";\n  id?: any | null;\n}\nexport type BaseUuidEntityViewName = \"_minimal\" | \"_local\" | \"_base\";\nexport type BaseUuidEntityView<V extends BaseUuidEntityViewName> = never;\n","import { BaseUuidEntity } from \"./sys$BaseUuidEntity\";\nexport class StandardEntity extends BaseUuidEntity {\n  static NAME = \"sys$StandardEntity\";\n  version?: number | null;\n  createTs?: any | null;\n  createdBy?: string | null;\n  updateTs?: any | null;\n  updatedBy?: string | null;\n  deleteTs?: any | null;\n  deletedBy?: string | null;\n}\nexport type StandardEntityViewName = \"_minimal\" | \"_local\" | \"_base\";\nexport type StandardEntityView<V extends StandardEntityViewName> = never;\n","import { StandardEntity } from \"./base/sys$StandardEntity\";\r\nimport { Account } from \"./tagency_Account\";\r\nimport { User } from \"./tagency$User\";\r\nexport class Customer extends StandardEntity {\r\n  static NAME = \"tagency_Customer\";\r\n  code?: string | null;\r\n  firstName?: string | null;\r\n  name?: string | null;\r\n  lastName?: string | null;\r\n  email?: string | null;\r\n  phone?: string | null;\r\n  registerDate?: any | null;\r\n  status?: string | null;\r\n  account?: Account | null;\r\n  previousStatus?: string | null;\r\n  marketer?: User | null;\r\n  birthDay?: any | null;\r\n  passport?: string | null;\r\n  placeBirth?: string | null;\r\n  registered?: boolean | null;\r\n  user?: User | null;\r\n}\r\nexport type CustomerViewName =\r\n  | \"_minimal\"\r\n  | \"_local\"\r\n  | \"_base\"\r\n  | \"customer-view\"\r\n  | \"customer-list\";\r\nexport type CustomerView<V extends CustomerViewName> = V extends \"_minimal\"\r\n  ? Pick<Customer, \"id\" | \"firstName\" | \"name\" | \"lastName\" | \"code\">\r\n  : V extends \"_local\"\r\n  ? Pick<\r\n      Customer,\r\n      | \"id\"\r\n      | \"code\"\r\n      | \"firstName\"\r\n      | \"name\"\r\n      | \"lastName\"\r\n      | \"email\"\r\n      | \"phone\"\r\n      | \"registerDate\"\r\n      | \"status\"\r\n      | \"previousStatus\"\r\n      | \"birthDay\"\r\n      | \"passport\"\r\n      | \"placeBirth\"\r\n      | \"registered\"\r\n    >\r\n  : V extends \"_base\"\r\n  ? Pick<\r\n      Customer,\r\n      | \"id\"\r\n      | \"firstName\"\r\n      | \"name\"\r\n      | \"lastName\"\r\n      | \"code\"\r\n      | \"email\"\r\n      | \"phone\"\r\n      | \"registerDate\"\r\n      | \"status\"\r\n      | \"previousStatus\"\r\n      | \"birthDay\"\r\n      | \"passport\"\r\n      | \"placeBirth\"\r\n      | \"registered\"\r\n    >\r\n  : V extends \"customer-view\"\r\n  ? Pick<\r\n      Customer,\r\n      | \"id\"\r\n      | \"code\"\r\n      | \"firstName\"\r\n      | \"name\"\r\n      | \"lastName\"\r\n      | \"email\"\r\n      | \"phone\"\r\n      | \"registerDate\"\r\n      | \"status\"\r\n      | \"previousStatus\"\r\n      | \"birthDay\"\r\n      | \"passport\"\r\n      | \"placeBirth\"\r\n      | \"registered\"\r\n      | \"marketer\"\r\n      | \"account\"\r\n    >\r\n  : V extends \"customer-list\"\r\n  ? Pick<\r\n      Customer,\r\n      | \"id\"\r\n      | \"firstName\"\r\n      | \"name\"\r\n      | \"lastName\"\r\n      | \"code\"\r\n      | \"email\"\r\n      | \"phone\"\r\n      | \"status\"\r\n      | \"marketer\"\r\n    >\r\n  : never;\r\n","import { CubaApp, FetchOptions } from \"@cuba-platform/rest\";\r\n\r\nexport type tagency_RegisterService_register_params = {\r\n  customer: any;\r\n};\r\n\r\nexport type tagency_RegisterService_resetPassword_params = {\r\n  login: any;\r\n};\r\n\r\nexport type tagency_RegisterService_changePassword_params = {\r\n  current: string;\r\n  password: string;\r\n};\r\n\r\nexport type tagency_ChatService_loadMessages_params = {\r\n  start: any;\r\n  groupId: any;\r\n  limit: any;\r\n};\r\n\r\nexport type tagency_ChatService_markAsRead_params = {\r\n  messageIds: any;\r\n};\r\n\r\nexport type tagency_ChatService_sendMessage_params = {\r\n  groupId: any;\r\n  content: any;\r\n};\r\n\r\nexport type tagency_ChatService_getUnreadCountMessage_params = {\r\n  groupId: any;\r\n};\r\n\r\nexport type tagency_ChatService_loadNewMessages_params = {\r\n  groupId: any;\r\n  limit: any;\r\n};\r\n\r\nexport var restServices = {\r\n  tagency_RegisterService: {\r\n    register: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => (\r\n      params: tagency_RegisterService_register_params\r\n    ) => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_RegisterService\",\r\n        \"register\",\r\n        params,\r\n        fetchOpts\r\n      );\r\n    },\r\n    resetPassword: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => (\r\n      params: tagency_RegisterService_resetPassword_params\r\n    ) => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_RegisterService\",\r\n        \"resetPassword\",\r\n        params,\r\n        fetchOpts\r\n      );\r\n    },\r\n    getUserName: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => () => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_RegisterService\",\r\n        \"getUserName\",\r\n        {},\r\n        fetchOpts\r\n      );\r\n    },\r\n    changePassword: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => (\r\n      params: tagency_RegisterService_changePassword_params\r\n    ) => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_RegisterService\",\r\n        \"changePassword\",\r\n        params,\r\n        fetchOpts\r\n      );\r\n    }\r\n  },\r\n  tagency_ChatService: {\r\n    loadMessages: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => (\r\n      params: tagency_ChatService_loadMessages_params\r\n    ) => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_ChatService\",\r\n        \"loadMessages\",\r\n        params,\r\n        fetchOpts\r\n      );\r\n    },\r\n    markAsRead: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => (\r\n      params: tagency_ChatService_markAsRead_params\r\n    ) => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_ChatService\",\r\n        \"markAsRead\",\r\n        params,\r\n        fetchOpts\r\n      );\r\n    },\r\n    sendMessage: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => (\r\n      params: tagency_ChatService_sendMessage_params\r\n    ) => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_ChatService\",\r\n        \"sendMessage\",\r\n        params,\r\n        fetchOpts\r\n      );\r\n    },\r\n    getUnreadCountMessage: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => (\r\n      params: tagency_ChatService_getUnreadCountMessage_params\r\n    ) => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_ChatService\",\r\n        \"getUnreadCountMessage\",\r\n        params,\r\n        fetchOpts\r\n      );\r\n    },\r\n    getConnectedCustomerGroup: (\r\n      cubaApp: CubaApp,\r\n      fetchOpts?: FetchOptions\r\n    ) => () => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_ChatService\",\r\n        \"getConnectedCustomerGroup\",\r\n        {},\r\n        fetchOpts\r\n      );\r\n    },\r\n    loadNewMessages: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => (\r\n      params: tagency_ChatService_loadNewMessages_params\r\n    ) => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_ChatService\",\r\n        \"loadNewMessages\",\r\n        params,\r\n        fetchOpts\r\n      );\r\n    },\r\n    isConnectedCustomerMarketerOnline: (\r\n      cubaApp: CubaApp,\r\n      fetchOpts?: FetchOptions\r\n    ) => () => {\r\n      return cubaApp.invokeService(\r\n        \"tagency_ChatService\",\r\n        \"isConnectedCustomerMarketerOnline\",\r\n        {},\r\n        fetchOpts\r\n      );\r\n    }\r\n  }\r\n};\r\n","import * as React from \"react\";\r\n\r\nimport \"./Register.css\"\r\nimport {  Form, message, Input,  Alert, Button, Card, DatePicker } from \"antd\";\r\nimport { injectIntl, WrappedComponentProps, FormattedMessage } from \"react-intl\";\r\nimport { MainStoreInjected, instance, withLocalizedForm, clearFieldErrors, extractServerValidationErrors, constructFieldsWithErrors, injectMainStore, CubaAppContextValue, getCubaREST, MultilineText } from \"@cuba-platform/react\";\r\nimport { Customer } from \"../../../cuba/entities/tagency_Customer\";\r\nimport { observable, action, IReactionDisposer, toJS } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { restServices } from \"../../../cuba/services\";\r\nimport moment, { Moment } from \"moment\";\r\n\r\ntype Props = FormComponentProps & EditorProps & MainStoreInjected & CubaAppContextValue;\r\n\r\ntype EditorProps = {\r\n  entityId?: string;\r\n  close: (register: boolean) =>void;\r\n//  show: boolean;\r\n};\r\n\r\n@observer\r\nclass Register extends React.Component< WrappedComponentProps & Props> {\r\n\r\n\r\n  registerService = (customer: Customer) => {\r\n    return restServices.tagency_RegisterService.register(getCubaREST()!)({customer: customer});\r\n  }\r\n\r\n  dataInstance  = instance<Customer>(Customer.NAME,{view: 'customer-view',loadImmediately: false});\r\n  fields = [\r\n    \"firstName\",\r\n    \"name\",\r\n    \"lastName\",\r\n    \"email\",\r\n    \"phone\",\r\n     \"birthDay\",\r\n    \"placeBirth\",\r\n    \"passport\"\r\n  ];\r\n/*\r\n@observable\r\nvisible = this.props.show;*/\r\n@observable\r\nglobalErrors: string[] = [];\r\nreactionDisposer: IReactionDisposer;\r\n@observable\r\nsubmited = false\r\n@action\r\nresgister = ()=>{\r\n  this.submited = true\r\n  this.props.form.validateFields((err) => {\r\n    if (err) {\r\n      message.error(\r\n        this.props.intl.formatMessage({\r\n          id: \"management.editor.validationError\"\r\n        })\r\n      );\r\n      return;\r\n    }\r\n    this.registerService(this.props.form.getFieldsValue(this.fields))\r\n      .then(() => {\r\n        message.success(\r\n          this.props.intl.formatMessage({ id: \"register.success\" })\r\n        );\r\n        //this.visible =false;\r\n        this.close();\r\n      })\r\n      .catch((e: any) => {\r\n        if (e.response && typeof e.response.json === \"function\") {\r\n          e.response.json().then((response: any) => {\r\n            clearFieldErrors(this.props.form);\r\n            const {\r\n              globalErrors,\r\n              fieldErrors\r\n            } = extractServerValidationErrors(response);\r\n            this.globalErrors = globalErrors;\r\n            if (fieldErrors.size > 0) {\r\n              this.props.form.setFields(\r\n                constructFieldsWithErrors(fieldErrors, this.props.form)\r\n              );\r\n            }\r\n\r\n            if (fieldErrors.size > 0 || globalErrors.length > 0) {\r\n              message.error(\r\n                this.props.intl.formatMessage({\r\n                  id: \"management.editor.validationError\"\r\n                })\r\n              );\r\n            } else {\r\n              message.error(\r\n                this.props.intl.formatMessage({\r\n                  id: \"management.editor.error\"\r\n                })\r\n              );\r\n            }\r\n          });\r\n        } else {\r\n          message.error(\r\n            this.props.intl.formatMessage({ id: \"management.editor.error\" })\r\n          );\r\n        }\r\n        this.submited =false;\r\n      });\r\n  });\r\n};\r\n\r\nmajor: Moment;\r\n\r\nnotMajor = (date : moment.Moment)=>date.local().isAfter(this.major);\r\n\r\nclose = ()=>this.props.close(true);\r\n\r\n  render() {\r\n    ///store!.item.firstName = \"blala\";\r\n    const { getFieldDecorator } = this.props.form;\r\n    return(\r\n      //<Modal title={this.props.intl.formatMessage({ id: \"register.title\" })}\r\n        //visible={this.visible}\r\n        //onCancel ={this.close}\r\n        //onOk = {this.resgister}>\r\n        <Card  title={<FormattedMessage id=\"register.title\" />} className=\"app-register narrow-layout\">\r\n        <Form layout=\"horizontal\" labelAlign=\"left\" onSubmit={this.resgister} >\r\n          <Form.Item  label= {<FormattedMessage id ='customer.firstName'/>} \r\n                      >\r\n            {getFieldDecorator('firstName')(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item  label= {<FormattedMessage id ='customer.name'/>} \r\n                      >\r\n            {getFieldDecorator('name',{\r\n                rules: [{ required: true }]\r\n              })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item  label= {<FormattedMessage id ='customer.lastName'/>} \r\n                      >\r\n            {getFieldDecorator('lastName')(<Input />)}\r\n          </Form.Item>\r\n            <Form.Item label={<FormattedMessage id ='customer.email'/>}>\r\n              {getFieldDecorator('email',{rules:[{type: 'email'}]})(<Input type='email'/>)}\r\n            </Form.Item>\r\n            <Form.Item label={<FormattedMessage id ='customer.phone'/>}>\r\n              {getFieldDecorator('phone',\r\n              {rules:\r\n                [\r\n                  {required: true},\r\n                  {message: <FormattedMessage id='phone.error'/>\r\n                    ,pattern: /(\\+243)\\d/}\r\n                ]})(<Input type='tel'\r\n                            placeholder=\"+243\"/>)}\r\n            </Form.Item>\r\n            <Form.Item label={<FormattedMessage id ='customer.birthDay'/>}>\r\n              {getFieldDecorator('birthDay',{})(<DatePicker disabledDate={this.notMajor} showToday={false}/>)}\r\n            </Form.Item>\r\n            <Form.Item  label= {<FormattedMessage id ='customer.placeBirth'/>} \r\n                      >\r\n            {getFieldDecorator('placeBirth')(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item  label= {<FormattedMessage id ='customer.passport'/>} \r\n                      >\r\n            {getFieldDecorator('passport')(<Input />)}\r\n          </Form.Item>\r\n          {this.globalErrors.length > 0 && (\r\n              <Alert\r\n                message={<MultilineText lines={toJS(this.globalErrors)} />}\r\n                type=\"error\"\r\n                style={{ marginBottom: \"24px\" }}\r\n              />\r\n            )}\r\n            <Form.Item>\r\n\r\n              <Button\r\n                type=\"default\"\r\n                htmlType=\"button\"\r\n                style = {{float: \"left\"}}\r\n                onClick={this.close}>\r\n                <FormattedMessage id=\"management.editor.cancel\" />\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                loading={this.submited}\r\n                style={{ marginLeft: \"8px\",float: 'right' }}\r\n              >\r\n                <FormattedMessage id=\"management.editor.submit\" />\r\n              </Button>\r\n            </Form.Item>\r\n        </Form>\r\n        </Card>);\r\n      //</Modal>);\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.major = moment().subtract(18,'years');\r\n    console.debug(this.major);\r\n  }\r\n/*\r\n  componentDidMount() {\r\n      this.dataInstance.setItem(new Customer());\r\n    \r\n    this.reactionDisposer = reaction(\r\n      () => {\r\n        return this.dataInstance.item;\r\n      },\r\n      () => {\r\n        this.props.form.setFieldsValue(\r\n          this.dataInstance.getFieldValues(this.fields)\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.reactionDisposer();\r\n  }*/\r\n}\r\n\r\nexport default injectMainStore(injectIntl(\r\n  withLocalizedForm<EditorProps>({\r\n    onValuesChange: (props: any, changedValues: any) => {\r\n      // Reset server-side errors when field is edited\r\n      Object.keys(changedValues).forEach((fieldName: string) => {\r\n        props.form.setFields({\r\n          [fieldName]: {\r\n            value: changedValues[fieldName]\r\n          }\r\n        });\r\n      });\r\n    }\r\n  })(Register))\r\n);","import * as React from \"react\";\r\n\r\nimport \"./Reset.css\"\r\nimport {  Form, message, Alert, Input, Icon, Card, Button } from \"antd\";\r\nimport { injectIntl, WrappedComponentProps, FormattedMessage } from \"react-intl\";\r\nimport { withLocalizedForm, MultilineText, clearFieldErrors, extractServerValidationErrors, constructFieldsWithErrors, injectMainStore, getCubaREST } from \"@cuba-platform/react\";\r\nimport { observable, action, IReactionDisposer, toJS } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { restServices } from \"../../../cuba/services\";\r\n\r\ntype Props = FormComponentProps & ResetProps;\r\n\r\ntype ResetProps = {\r\n  close: (register: boolean) => void;\r\n};\r\n\r\n@observer\r\nclass Reset extends React.Component<WrappedComponentProps & Props> {\r\n\r\n\r\n  resetService = (login: string) => {\r\n    return restServices.tagency_RegisterService.resetPassword(getCubaREST()!)({ login: login });\r\n  }\r\n\r\n  fields = [\r\n    \"login\"\r\n  ];\r\n\r\n  @observable\r\n  submited = false;\r\n  @observable\r\n  globalErrors: string[] = [];\r\n  reactionDisposer: IReactionDisposer;\r\n\r\n  @action\r\n  reset = () => {\r\n    this.submited = true;\r\n    this.props.form.validateFields((err) => {\r\n      if (err) {\r\n        message.error(\r\n          this.props.intl.formatMessage({\r\n            id: \"management.editor.validationError\"\r\n          })\r\n        );\r\n        return;\r\n      }\r\n      this.resetService(this.props.form.getFieldValue('login'))\r\n        .then(() => {\r\n          message.success(\r\n            this.props.intl.formatMessage({ id: \"reset.success\" })\r\n          );\r\n          this.close();\r\n        })\r\n        .catch((e: any) => {\r\n          if (e.response && typeof e.response.json === \"function\") {\r\n            e.response.json().then((response: any) => {\r\n              clearFieldErrors(this.props.form);\r\n              const {\r\n                globalErrors,\r\n                fieldErrors\r\n              } = extractServerValidationErrors(response);\r\n              this.globalErrors = globalErrors;\r\n              if (fieldErrors.size > 0) {\r\n                this.props.form.setFields(\r\n                  constructFieldsWithErrors(fieldErrors, this.props.form)\r\n                );\r\n              }\r\n\r\n              if (fieldErrors.size > 0 || globalErrors.length > 0) {\r\n                message.error(\r\n                  this.props.intl.formatMessage({\r\n                    id: \"management.editor.validationError\"\r\n                  })\r\n                );\r\n              } else {\r\n                message.error(\r\n                  this.props.intl.formatMessage({\r\n                    id: response.details\r\n                  })\r\n                );\r\n              }\r\n            });\r\n          } else {\r\n            message.error(\r\n              this.props.intl.formatMessage({ id: \"management.editor.error\" })\r\n            );\r\n          }\r\n          this.submited = false;\r\n        });\r\n    });\r\n  };\r\n  close = () => this.props.close(false);\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <Card title={<FormattedMessage id=\"reset.title\" />} className=\"narrow-layout\">\r\n        <Form layout=\"horizontal\" labelAlign=\"left\" onSubmit={this.reset}>\r\n          <Form.Item \r\n            style={{ marginBottom: \"12px\" }}>\r\n            {getFieldDecorator('login', {\r\n              rules: [{ required: true }]\r\n            })(<Input placeholder={this.props.intl.formatMessage({\r\n              id: \"login.placeholder.login\"\r\n            })}\r\n            prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n              size=\"large\" />)}\r\n          </Form.Item>\r\n          {this.globalErrors.length > 0 && (\r\n            <Alert\r\n              message={<MultilineText lines={toJS(this.globalErrors)} />}\r\n              type=\"error\"\r\n              style={{ marginBottom: \"24px\" }}\r\n            />\r\n          )}\r\n          <Form.Item>\r\n\r\n            <Button\r\n              type=\"default\"\r\n              htmlType=\"button\"\r\n              style = {{float: \"left\"}}\r\n              onClick={this.close}>\r\n              <FormattedMessage id=\"management.editor.cancel\" />\r\n            </Button>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={this.submited}\r\n              loading={this.submited}\r\n              style={{ marginLeft: \"8px\", float: 'right' }}\r\n            >\r\n              <FormattedMessage id=\"management.editor.submit\" />\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Card>);\r\n\r\n  }\r\n  /*\r\n    componentDidMount() {\r\n        this.dataInstance.setItem(new Customer());\r\n      \r\n      this.reactionDisposer = reaction(\r\n        () => {\r\n          return this.dataInstance.item;\r\n        },\r\n        () => {\r\n          this.props.form.setFieldsValue(\r\n            this.dataInstance.getFieldValues(this.fields)\r\n          );\r\n        }\r\n      );\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      this.reactionDisposer();\r\n    }*/\r\n}\r\n\r\nexport default injectMainStore(injectIntl(\r\n  withLocalizedForm<ResetProps>({\r\n    onValuesChange: (props: any, changedValues: any) => {\r\n      // Reset server-side errors when field is edited\r\n      Object.keys(changedValues).forEach((fieldName: string) => {\r\n        props.form.setFields({\r\n          [fieldName]: {\r\n            value: changedValues[fieldName]\r\n          }\r\n        });\r\n      });\r\n    }\r\n  })(Reset))\r\n);","import * as React from \"react\";\r\nimport { ChangeEvent, FormEvent } from \"react\";\r\nimport { Button, Form, Icon, Input, message } from \"antd\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, observable } from \"mobx\";\r\nimport { injectMainStore, MainStoreInjected } from \"@cuba-platform/react\";\r\nimport \"./Login.css\";\r\nimport logo from \"./logo.png\";\r\nimport { LanguageSwitcher } from \"../../i18n/LanguageSwitcher\";\r\nimport Centered from \"../common/Centered\";\r\nimport Powered from \"../powered/Powered\";\r\nimport {\r\n  FormattedMessage,\r\n  injectIntl,\r\n  WrappedComponentProps\r\n} from \"react-intl\";\r\nimport Register from \"./register/Register\";\r\nimport Reset from \"./reset/Reset\";\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport Widget from \"../chat/components/widget\";\r\nimport ConnectedWidget from \"../chat/ConnectedWidget\";\r\n\r\n\r\n\r\n\r\n@injectMainStore\r\n@observer\r\nclass Login extends React.Component<MainStoreInjected & WrappedComponentProps , {requestingRegister: boolean, requestingReset: boolean}> {\r\n\r\n  state = {requestingRegister: false, requestingReset: false};\r\n  @observable login: string;\r\n  @observable password: string;\r\n  @observable performingLoginRequest = false;\r\n  //@observable requestingRegister = false;\r\n\r\n  @action\r\n  changeLogin = (e: ChangeEvent<HTMLInputElement>) => {\r\n    this.login = e.target.value;\r\n  };\r\n\r\n  @action\r\n  changePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n    this.password = e.target.value;\r\n  };\r\n\r\n  \r\n  register = ()=>{\r\n    this.setState({requestingRegister: true});\r\n  }\r\n\r\n  reset = ()=>{\r\n    this.setState({requestingReset: true});\r\n  }\r\n\r\n  @action\r\n  doLogin = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    this.performingLoginRequest = true;\r\n    this.props\r\n      .mainStore!.login(this.login, this.password)\r\n      .then(\r\n        action(() => {\r\n          this.performingLoginRequest = false;\r\n        })\r\n      )\r\n      .catch(\r\n        action(() => {\r\n          this.performingLoginRequest = false;\r\n          message.error(this.props.intl.formatMessage({ id: \"login.failed\" }));\r\n        })\r\n      );\r\n  };\r\n\r\n\r\nhandleClose = (register: boolean)=>{\r\n  if (register)\r\n    this.setState({requestingRegister: false});\r\n  else\r\n    this.setState({requestingReset:  false});\r\n}\r\n\r\nhandleNewUserMessage = (msg:string) => {\r\n    alert(msg);\r\n  }\r\n  render() {\r\n    const {requestingRegister,requestingReset} = this.state;\r\n    /*if (requestingRegister === true)\r\n    {\r\n      this.setState({requestingRegister: false});\r\n    }\r\n    if (requestingReset === true)\r\n    {\r\n      this.setState({requestingReset: false});\r\n    }*/\r\n      return (<div className=\"login-background\">\r\n      <Centered>\r\n      <div className=\"login-form\">\r\n      <div className=\"login-title\">\r\n        <img\r\n          src={logo}\r\n          alt={this.props.intl.formatMessage({ id: \"common.alt.logo\" })}\r\n          className=\"logo\"\r\n        />\r\n        <div className=\"title\"><FormattedMessage id=\"home.welcome\" /> LLYCIAH Travel!</div>\r\n        </div>\r\n       \r\n        {(requestingRegister || requestingReset) ?\r\n          <>\r\n          {requestingRegister ?\r\n          <Register close={this.handleClose}/>: <Reset close={this.handleClose}/>}\r\n          </>\r\n          :\r\n          <Form layout=\"vertical\" onSubmit={this.doLogin}>\r\n          <Form.Item>\r\n            <Input\r\n              placeholder={this.props.intl.formatMessage({\r\n                id: \"login.placeholder.login\"\r\n              })}\r\n              onChange={this.changeLogin}\r\n              value={this.login}\r\n              prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n              size=\"large\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Input\r\n              placeholder={this.props.intl.formatMessage({\r\n                id: \"login.placeholder.password\"\r\n              })}\r\n              onChange={this.changePassword}\r\n              value={this.password}\r\n              type=\"password\"\r\n              prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n              size=\"large\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <div style={{ float: \"right\" }}>\r\n              <LanguageSwitcher className=\"language-switcher\" />\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              size=\"large\"\r\n              loading={this.performingLoginRequest}\r\n            >\r\n              <FormattedMessage id=\"login.loginBtn\" />\r\n            </Button>\r\n            <Button \r\n                                                    type=\"link\" \r\n                                                    size=\"large\" \r\n                                                    htmlType=\"button\" \r\n                                                    className='login-reset'  \r\n                                                    onClick={this.reset}>\r\n                                                      <FormattedMessage id=\"login.resetBtn\"/>\r\n                                                    </Button>\r\n          </Form.Item>\r\n          <div>\r\n          <FormattedMessage id=\"login.register\"/>\r\n           </div>\r\n           <Button\r\n                                                    type=\"ghost\" \r\n                                                    size=\"large\" \r\n                                                    htmlType=\"button\" \r\n                                                    className='login-register'  \r\n                                                    onClick={this.register}>\r\n                                                      <FormattedMessage id=\"login.registerBtn\"/>\r\n                                                    </Button>\r\n              </Form>\r\n        }\r\n        <Powered/>\r\n      </div>\r\n      </Centered>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n    //setInterval(()=>addResponseMessage(\"bonh\"),1000);\r\n    //setInterval(()=>renderCustomComponent(Test,{test: true},true),1001);\r\n  }\r\n/*\r\n  shouldComponentUpdate(nextProps: any, nextState: any)\r\n  {\r\n    if ( nextState.requestingRegister != this.state.requestingRegister)\r\n      return nextState.requestingRegister && !this.state.requestingRegister;\r\n    else if( nextState.requestingReset != this.state.requestingReset)\r\n      return nextState.requestingReset && !this.state.requestingReset;\r\n    else\r\n      return true;\r\n  }*/\r\n}\r\n\r\nexport default injectIntl(Login);\r\n\r\n","import * as React from \"react\";\r\n\r\nimport \"./Password.css\"\r\nimport { Modal, Form, message,  Input,  Button } from \"antd\";\r\nimport { injectIntl, WrappedComponentProps, FormattedMessage } from \"react-intl\";\r\nimport { withLocalizedForm,  clearFieldErrors, extractServerValidationErrors, constructFieldsWithErrors, injectMainStore, getCubaREST } from \"@cuba-platform/react\";\r\nimport { observable, action} from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { restServices } from \"../../../cuba/services\";\r\n\r\ntype Props = FormComponentProps & PasswordProps;\r\n\r\ntype PasswordProps = {show ?: boolean};\r\n\r\n@observer\r\nclass Password extends React.Component<WrappedComponentProps & Props> {\r\n\r\n\r\n  changeService = (oldPwd: string, newPwd: string) => {\r\n    return restServices.tagency_RegisterService.changePassword(getCubaREST()!)({ current: oldPwd, password: newPwd });\r\n  }\r\n\r\n\r\n\r\n  @observable\r\n  requested = false;\r\n  @observable\r\n  globalErrors: string[] = [];\r\n\r\n\r\n  @action\r\n  change = () => {\r\n    const form = this.props.form;\r\n    this.requested = true;\r\n    form.validateFieldsAndScroll((err) => {\r\n      if (err) {\r\n        message.error(\r\n          this.props.intl.formatMessage({\r\n            id: \"management.editor.validationError\"\r\n          })\r\n        );\r\n        this.requested = false;\r\n        return;\r\n      }\r\n      if (form.getFieldValue('new') === form.getFieldValue('old')) {\r\n        message.error(\r\n          this.props.intl.formatMessage({\r\n            id: \"password.same\"\r\n          })\r\n        );\r\n        this.requested = false;\r\n        return;\r\n      }\r\n      if (form.getFieldValue('new') !== form.getFieldValue('confirm')) {\r\n        message.error(\r\n          this.props.intl.formatMessage({\r\n            id: \"password.different\"\r\n          })\r\n        );\r\n        this.requested = false;\r\n        return;\r\n      }\r\n      this.changeService(this.props.form.getFieldValue('old'), this.props.form.getFieldValue('new'))\r\n        .then(() => {\r\n          message.success(\r\n            this.props.intl.formatMessage({ id: \"password.success\" })\r\n          );\r\n          this.closeDialog();\r\n        })\r\n        .catch((e: any) => {\r\n          if (e.response && typeof e.response.json === \"function\") {\r\n            e.response.json().then((response: any) => {\r\n              clearFieldErrors(this.props.form);\r\n              const {\r\n                globalErrors,\r\n                fieldErrors\r\n              } = extractServerValidationErrors(response);\r\n              this.globalErrors = globalErrors;\r\n              if (fieldErrors.size > 0) {\r\n                this.props.form.setFields(\r\n                  constructFieldsWithErrors(fieldErrors, this.props.form)\r\n                );\r\n              }\r\n\r\n              if (fieldErrors.size > 0 || globalErrors.length > 0) {\r\n                message.error(\r\n                  this.props.intl.formatMessage({\r\n                    id: \"management.editor.validationError\"\r\n                  })\r\n                );\r\n              } else {\r\n                message.error(\r\n                  this.props.intl.formatMessage({\r\n                    id: response.details\r\n                  })\r\n                );\r\n              }\r\n            });\r\n          } else {\r\n            message.error(\r\n              this.props.intl.formatMessage({ id: \"management.editor.error\" })\r\n            );\r\n          }\r\n          this.requested = false;\r\n        });\r\n    });\r\n  };\r\n\r\n  @observable\r\n  show = false\r\n\r\n  @action\r\n  showDialog = () => {\r\n    this.show = true;\r\n  }\r\n\r\n  @action\r\n  closeDialog = () => this.show = false\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n      return (<>\r\n        <Button className=\"panelelement password\" \r\n        icon='security-scan' \r\n        onClick={this.showDialog} \r\n        style ={{ border: 0 }}\r\n        htmlType=\"button\" \r\n        ghost={true} \r\n        title={this.props.intl.formatMessage({ id: 'password.title'})} >\r\n        </Button>\r\n        {this.show && <Modal visible={this.show} title={this.props.intl.formatMessage({id : 'password.title'}) }\r\n        width=\"300px\"\r\n        onCancel={this.closeDialog} \r\n        onOk={this.change}\r\n        okText={<FormattedMessage id=\"password.change\"/>}\r\n        cancelText={<FormattedMessage id=\"management.editor.cancel\"/>}>\r\n          <Form  layout=\"vertical\" >\r\n          <Form.Item  label= {<FormattedMessage id ='password.old'/>} style={{marginBottom: \"0px\"}}>\r\n            {getFieldDecorator('old',{\r\n                rules: [{ required: true }]\r\n              })(<Input type=\"password\" />)}\r\n          </Form.Item>\r\n          <Form.Item  label= {<FormattedMessage id ='password.new'/>} style={{marginBottom: \"0px\"}} >\r\n            {getFieldDecorator('new',{\r\n                rules: [{ required: true }]\r\n              })(<Input type=\"password\"/>)}\r\n          </Form.Item>\r\n          <Form.Item  label= {<FormattedMessage id ='password.confirm'/>} style={{marginBottom: \"0px\"}} >\r\n            {getFieldDecorator('confirm',{\r\n                rules: [{ required: true }]\r\n              })(<Input type=\"password\"/>)}\r\n          </Form.Item>\r\n          </Form>\r\n          </Modal>}\r\n      </>\r\n    );\r\n\r\n  }\r\n}\r\n  \r\nexport default injectMainStore(injectIntl(\r\n  withLocalizedForm<PasswordProps>({\r\n    onValuesChange: (props: any, changedValues: any) => {\r\n      // Reset server-side errors when field is edited\r\n      Object.keys(changedValues).forEach((fieldName: string) => {\r\n        props.form.setFields({\r\n          [fieldName]: {\r\n            value: changedValues[fieldName]\r\n          }\r\n        });\r\n      });\r\n    }\r\n  })(Password))\r\n);\r\n\r\n/*\r\n{this.show &&\r\n          <Modal title={<FormattedMessage id=\"password.title\" />}\r\n            onCancel={this.closeDialog}\r\n            okButtonProps={{ loading: this.requested }}\r\n            cancelText={<FormattedMessage id=\"password.cancel\" />}\r\n            okText={<FormattedMessage id=\"password.change\" />}\r\n            onOk={this.change}>\r\n            <Form layout=\"horizontal\" labelAlign=\"left\" >\r\n              <Form.Item\r\n                style={{ marginBottom: \"12px\" }} label={<FormattedMessage id=\"password.old\" />}>\r\n                {getFieldDecorator('old', {\r\n                  rules: [{ required: true}]\r\n                })(<Input size=\"large\" />)}\r\n              </Form.Item>\r\n              <Form.Item label={<FormattedMessage id=\"password.new\" />}>\r\n                {getFieldDecorator('new', {\r\n                  rules: [{ required: true,min: 5}]\r\n                })(<Input size=\"large\" />)}\r\n              </Form.Item>\r\n              <Form.Item label={<FormattedMessage id=\"password.confirm\" />}>\r\n                {getFieldDecorator('confirm', {\r\n                  rules: [{ required: true,min: 5}]\r\n                })(<Input size=\"large\" />)}\r\n              </Form.Item>\r\n              {this.globalErrors.length > 0 && (\r\n                <Alert\r\n                  message={<MultilineText lines={toJS(this.globalErrors)} />}\r\n                  type=\"error\"\r\n                  style={{ marginBottom: \"24px\" }}\r\n                />\r\n              )}\r\n\r\n            </Form>\r\n          </Modal>}\r\n          */\r\n","import { Button, Modal } from \"antd\";\r\nimport * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport \"./AppHeader.css\";\r\nimport logo from \"./logo.png\";\r\nimport { injectMainStore, MainStoreInjected, getCubaREST } from \"@cuba-platform/react\";\r\nimport { LanguageSwitcher } from \"../../i18n/LanguageSwitcher\";\r\nimport { injectIntl, WrappedComponentProps } from \"react-intl\";\r\nimport { restServices } from \"../../cuba/services\";\r\nimport { observable, action } from \"mobx\";\r\nimport Password from \"./password/Password\";\r\n\r\n\r\n@injectMainStore\r\n@observer\r\nclass AppHeader extends React.Component<\r\n  MainStoreInjected & WrappedComponentProps\r\n> {\r\n\r\n  @observable\r\nuserName :string;\r\n \r\n  render() {\r\n    const appState = this.props.mainStore!;\r\n    return (\r\n      <div className=\"app-header\">\r\n        <div style={{textAlign: \"center\", verticalAlign: \"middle\"}}>\r\n          <img className=\"app-logo\"\r\n            src={logo}\r\n            alt={this.props.intl.formatMessage({ id: \"common.alt.logo\" })}\r\n          />\r\n          <span className=\"app-user\">{this.userName!}</span>\r\n        </div>\r\n        <div className=\"user-panel\">\r\n          <LanguageSwitcher className=\"panelelement language-switcher -header\" />\r\n          <span className=\"panelelement\" style={{display: \"none\"}}>{appState.userName}</span>\r\n          <Password/>\r\n          <Button\r\n            className=\"panelelement\"\r\n            ghost={true}\r\n            icon=\"logout\"\r\n            style={{ border: 0 }}\r\n            onClick={this.showLogoutConfirm}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  showLogoutConfirm = () => {\r\n    Modal.confirm({\r\n      title: this.props.intl.formatMessage({ id: \"header.logout.areYouSure\" }),\r\n      okText: this.props.intl.formatMessage({ id: \"header.logout.ok\" }),\r\n      cancelText: this.props.intl.formatMessage({ id: \"header.logout.cancel\" }),\r\n      onOk: () => {\r\n        this.props.mainStore!.logout();\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount()\r\n  {\r\n    restServices.tagency_RegisterService.getUserName(getCubaREST()!)()\r\n    .then(action((name)=>this.userName = name as string));\r\n  }\r\n}\r\n\r\nexport default injectIntl(AppHeader);\r\n","import * as React from \"react\";\r\nimport logo from \"./background.jpg\";\r\nimport {Zoom} from 'react-awesome-reveal';\r\n\r\nclass HomePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{textAlign:'center', verticalAlign: 'middle'}}>\r\n        <Zoom>\r\n        <img src={logo} alt=\"Llyciah Logo\" style={{\r\n          objectFit: 'contain',\r\n          fontFamily: 'object-fit: contain;',\r\n          objectPosition: 'center',\r\n          boxSizing: 'border-box',\r\n          display: 'inline-block',\r\n          width: '40%',\r\n          height: '40%'\r\n        }} />\r\n        </Zoom>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import { StandardEntity } from \"./base/sys$StandardEntity\";\nimport { Service } from \"./tagency_Service\";\nexport class Price extends StandardEntity {\n  static NAME = \"tagency_Price\";\n  service?: Service | null;\n  amount?: any | null;\n  name?: string | null;\n  description?: string | null;\n}\nexport type PriceViewName = \"_minimal\" | \"_local\" | \"_base\" | \"price-view\";\nexport type PriceView<V extends PriceViewName> = V extends \"_minimal\"\n  ? Pick<Price, \"id\" | \"service\" | \"name\">\n  : V extends \"_local\"\n  ? Pick<Price, \"id\" | \"amount\" | \"name\" | \"description\">\n  : V extends \"_base\"\n  ? Pick<Price, \"id\" | \"service\" | \"name\" | \"amount\" | \"description\">\n  : V extends \"price-view\"\n  ? Pick<Price, \"id\" | \"amount\" | \"name\" | \"description\" | \"service\">\n  : never;\n","import * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Price } from \"../../cuba/entities/tagency_Price\";\r\nimport { Card, Icon } from \"antd\";\r\nimport { collection, EntityProperty } from \"@cuba-platform/react\";\r\n\r\n@observer\r\nexport class PriceCards extends React.Component {\r\n  dataCollection = collection<Price>(Price.NAME, {\r\n    view: \"price-view\",\r\n    sort: \"-updateTs\"\r\n  });\r\n  fields = [\"service\", \"description\",\"amount\"];\r\n\r\n  render() {\r\n    const { status, items } = this.dataCollection;\r\n\r\n    if (status === \"LOADING\") {\r\n      return <Icon type=\"spin\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"narrow-layout\">\r\n        {items.map(e => (\r\n          <Card\r\n            title={e.name}\r\n            key={e.id}\r\n            style={{ marginBottom: \"12px\" }}\r\n          >\r\n            {this.fields.map(p => (\r\n              <EntityProperty\r\n                entityName={Price.NAME}\r\n                propertyName={p}\r\n                value={e[p]}\r\n                key={p}\r\n              />\r\n            ))}\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { StandardEntity } from \"./base/sys$StandardEntity\";\r\nimport { Booking } from \"./tagency_Booking\";\r\nimport { TransactionType } from \"../enums/enums\";\r\nimport { User } from \"./base/sec$User\";\r\nimport { Account } from \"./tagency_Account\";\r\nimport { Service } from \"./tagency_Service\";\r\nimport { AccountingDay } from \"./tagency_AccountingDay\";\r\nexport class Transction extends StandardEntity {\r\n  static NAME = \"tagency_Transction\";\r\n  label?: string | null;\r\n  invoice?: string | null;\r\n  booking?: Booking | null;\r\n  description?: string | null;\r\n  type?: TransactionType | null;\r\n  amount?: any | null;\r\n  marketer?: User | null;\r\n  approved?: boolean | null;\r\n  settlement?: Transction | null;\r\n  debtor?: Account | null;\r\n  creditor?: Account | null;\r\n  service?: Service | null;\r\n  reference?: string | null;\r\n  valueDate?: AccountingDay | null;\r\n  related?: Transction | null;\r\n  deadline?: any | null;\r\n}\r\nexport type TransctionViewName =\r\n  | \"_minimal\"\r\n  | \"_local\"\r\n  | \"_base\"\r\n  | \"transction-customer-view\"\r\n  | \"transction-view\";\r\nexport type TransctionView<V extends TransctionViewName> = V extends \"_minimal\"\r\n  ? Pick<Transction, \"id\" | \"reference\">\r\n  : V extends \"_local\"\r\n  ? Pick<\r\n      Transction,\r\n      | \"id\"\r\n      | \"label\"\r\n      | \"invoice\"\r\n      | \"description\"\r\n      | \"type\"\r\n      | \"amount\"\r\n      | \"approved\"\r\n      | \"reference\"\r\n      | \"deadline\"\r\n    >\r\n  : V extends \"_base\"\r\n  ? Pick<\r\n      Transction,\r\n      | \"id\"\r\n      | \"reference\"\r\n      | \"label\"\r\n      | \"invoice\"\r\n      | \"description\"\r\n      | \"type\"\r\n      | \"amount\"\r\n      | \"approved\"\r\n      | \"deadline\"\r\n    >\r\n  : V extends \"transction-customer-view\"\r\n  ? Pick<\r\n      Transction,\r\n      | \"id\"\r\n      | \"label\"\r\n      | \"invoice\"\r\n      | \"description\"\r\n      | \"type\"\r\n      | \"amount\"\r\n      | \"approved\"\r\n      | \"reference\"\r\n      | \"deadline\"\r\n      | \"booking\"\r\n      | \"debtor\"\r\n      | \"creditor\"\r\n      | \"marketer\"\r\n      | \"service\"\r\n      | \"settlement\"\r\n      | \"related\"\r\n      | \"valueDate\"\r\n    >\r\n  : V extends \"transction-view\"\r\n  ? Pick<\r\n      Transction,\r\n      | \"id\"\r\n      | \"reference\"\r\n      | \"label\"\r\n      | \"invoice\"\r\n      | \"description\"\r\n      | \"type\"\r\n      | \"amount\"\r\n      | \"approved\"\r\n      | \"deadline\"\r\n      | \"debtor\"\r\n      | \"creditor\"\r\n      | \"marketer\"\r\n      | \"service\"\r\n    >\r\n  : never;\r\n","import * as React from \"react\";\r\nimport { FormEvent } from \"react\";\r\nimport { Alert, Button, Card, Form, message } from \"antd\";\r\nimport { observer } from \"mobx-react\";\r\nimport { TransctionManagement } from \"./TransctionManagement\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { IReactionDisposer, observable, reaction, toJS } from \"mobx\";\r\nimport {\r\n  FormattedMessage,\r\n  injectIntl,\r\n  WrappedComponentProps\r\n} from \"react-intl\";\r\n\r\nimport {\r\n  collection,\r\n  Field,\r\n  instance,\r\n  withLocalizedForm,\r\n  extractServerValidationErrors,\r\n  constructFieldsWithErrors,\r\n  clearFieldErrors,\r\n  MultilineText,\r\n  EntityProperty\r\n} from \"@cuba-platform/react\";\r\n\r\nimport \"../../app/App.css\";\r\nimport { Transction } from \"../../cuba/entities/tagency_Transction\";\r\n\r\n\r\n\r\ntype Props = EditorProps;\r\n\r\ntype EditorProps = {\r\n  entityId: string;\r\n};\r\n\r\n@observer\r\nclass TransctionEditComponent extends React.Component<\r\n  Props & WrappedComponentProps\r\n> {\r\n  dataInstance = instance<Transction>(Transction.NAME, {\r\n    view: \"transction-view\",\r\n    loadImmediately: false\r\n  });\r\n\r\n\r\n\r\n  fields = [\r\n    \"reference\",\r\n    'booking',\r\n\r\n    \"label\",\r\n\r\n    \"description\",\r\n\r\n    \"type\",\r\n\r\n    \"service\",\r\n    \"amount\",\r\n\r\n    \"deadline\",\r\n\r\n\r\n    \"marketer\"\r\n  ];\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const {item } = this.dataInstance;\r\n    const loading = item == undefined;\r\n    return (\r\n      <Card className=\"narrow-layout\" loading={loading}>\r\n        <>{!loading&& this.fields.map(p => (\r\n                <EntityProperty\r\n                  entityName={Transction.NAME}\r\n                  propertyName={p}\r\n                  value={item![p]}\r\n                  key={p}\r\n                />\r\n              ))}\r\n              </>\r\n          <div style={{textAlign: \"center\"}}>\r\n            <Link to={TransctionManagement.PATH}>\r\n              <Button htmlType=\"button\">\r\n                <FormattedMessage id=\"management.editor.close\" />\r\n              </Button>\r\n            </Link>\r\n            </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.entityId !== TransctionManagement.NEW_SUBPATH) {\r\n      this.dataInstance.load(this.props.entityId);\r\n    } \r\n}\r\n}\r\n\r\nexport default injectIntl(TransctionEditComponent);\r\n","import * as React from \"react\";\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport { List, Icon, Spin } from \"antd\";\r\n\r\nimport { Transction } from \"../../cuba/entities/tagency_Transction\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  collection,\r\n  injectMainStore,\r\n  MainStoreInjected,\r\n  EntityProperty\r\n} from \"@cuba-platform/react\";\r\n\r\nimport { TransctionManagement } from \"./TransctionManagement\";\r\nimport {\r\n  injectIntl,\r\n  WrappedComponentProps\r\n} from \"react-intl\";\r\n\r\n@injectMainStore\r\n@observer\r\nclass TransctionListComponent extends React.Component<\r\n  MainStoreInjected & WrappedComponentProps\r\n> {\r\n  dataCollection = collection<Transction>(Transction.NAME, {\r\n    view: \"transction-view\",\r\n    sort: \"-updateTs\"\r\n  });\r\n\r\n  fields = [\r\n    'createdTs',\r\n    'valueDate',\r\n    \"reference\",\r\n    \"label\",\r\n\r\n    \"type\",\r\n    \"service\",\r\n\r\n    \"amount\"\r\n\r\n  ];\r\n\r\n\r\n\r\n  render() {\r\n    const { status, items } = this.dataCollection;\r\n\r\n    if (status === \"LOADING\") {\r\n      return (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            left: \"50%\",\r\n            top: \"50%\",\r\n            transform: \"translate(-50%, -50%)\"\r\n          }}\r\n        >\r\n          <Spin size=\"large\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"narrow-layout\">\r\n        <List\r\n          itemLayout=\"horizontal\"\r\n          bordered\r\n          dataSource={items}\r\n          renderItem={item => (\r\n            <List.Item\r\n              actions={[\r\n                <Link hidden={true} to={TransctionManagement.PATH + \"/\" + item.id} key=\"view\">\r\n                  <Icon type=\"read\" />\r\n                </Link>\r\n              ]}\r\n            >\r\n              <div style={{ flexGrow: 1 }}>\r\n                {this.fields.map(p => (\r\n                  <EntityProperty\r\n                    entityName={Transction.NAME}\r\n                    propertyName={p}\r\n                    value={item[p]}\r\n                    key={p}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst TransctionList = injectIntl(TransctionListComponent);\r\n\r\nexport default TransctionList;\r\n","import * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { observer } from \"mobx-react\";\r\nimport TransctionEdit from \"./TransctionEdit\";\r\nimport TransctionList from \"./TransctionList\";\r\n\r\ntype Props = RouteComponentProps<{ entityId?: string }>;\r\n\r\n@observer\r\nexport class TransctionManagement extends React.Component<Props> {\r\n  static PATH = \"/transctionManagement\";\r\n  static NEW_SUBPATH = \"new\";\r\n\r\n  render() {\r\n    const { entityId } = this.props.match.params;\r\n    return (\r\n      <>\r\n        {entityId ? <TransctionEdit entityId={entityId} /> : <TransctionList />}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { StandardEntity } from \"./base/sys$StandardEntity\";\r\nimport { Customer } from \"./tagency_Customer\";\r\nimport { Service } from \"./tagency_Service\";\r\nimport { Transction } from \"./tagency_Transction\";\r\nimport { BookingStatus } from \"../enums/enums\";\r\nimport { Branch } from \"./tagency_Branch\";\r\nexport class Booking extends StandardEntity {\r\n  static NAME = \"tagency_Booking\";\r\n  code?: string | null;\r\n  customer?: Customer | null;\r\n  service?: Service | null;\r\n  transaction?: Transction | null;\r\n  reason?: string | null;\r\n  information?: string | null;\r\n  status?: BookingStatus | null;\r\n  branch?: Branch | null;\r\n}\r\nexport type BookingViewName =\r\n  | \"_minimal\"\r\n  | \"_local\"\r\n  | \"_base\"\r\n  | \"booking-customer-view\"\r\n  | \"booking-browse\";\r\nexport type BookingView<V extends BookingViewName> = V extends \"_local\"\r\n  ? Pick<Booking, \"id\" | \"code\" | \"reason\" | \"information\" | \"status\">\r\n  : V extends \"_base\"\r\n  ? Pick<Booking, \"id\" | \"code\" | \"reason\" | \"information\" | \"status\">\r\n  : V extends \"booking-customer-view\"\r\n  ? Pick<\r\n      Booking,\r\n      | \"id\"\r\n      | \"code\"\r\n      | \"reason\"\r\n      | \"information\"\r\n      | \"status\"\r\n      | \"service\"\r\n      | \"branch\"\r\n      | \"createTs\"\r\n      | \"transaction\"\r\n    >\r\n  : V extends \"booking-browse\"\r\n  ? Pick<\r\n      Booking,\r\n      | \"id\"\r\n      | \"code\"\r\n      | \"reason\"\r\n      | \"information\"\r\n      | \"status\"\r\n      | \"service\"\r\n      | \"branch\"\r\n      | \"createTs\"\r\n      | \"transaction\"\r\n      | \"customer\"\r\n    >\r\n  : never;\r\n","import { StandardEntity } from \"./base/sys$StandardEntity\";\nimport { ServiceType } from \"../enums/enums\";\nexport class Service extends StandardEntity {\n  static NAME = \"tagency_Service\";\n  type?: ServiceType | null;\n  name?: string | null;\n  active?: boolean | null;\n  description?: string | null;\n}\nexport type ServiceViewName = \"_minimal\" | \"_local\" | \"_base\";\nexport type ServiceView<V extends ServiceViewName> = V extends \"_minimal\"\n  ? Pick<Service, \"id\" | \"type\" | \"name\">\n  : V extends \"_local\"\n  ? Pick<Service, \"id\" | \"type\" | \"name\" | \"active\" | \"description\">\n  : V extends \"_base\"\n  ? Pick<Service, \"id\" | \"type\" | \"name\" | \"active\" | \"description\">\n  : never;\n","import { StandardEntity } from \"./base/sys$StandardEntity\";\r\nimport { User } from \"./tagency$User\";\r\nimport { Account } from \"./tagency_Account\";\r\nexport class Branch extends StandardEntity {\r\n  static NAME = \"tagency_Branch\";\r\n  name?: string | null;\r\n  location?: string | null;\r\n  users?: User[] | null;\r\n  account?: Account | null;\r\n  active?: boolean | null;\r\n  approved?: boolean | null;\r\n}\r\nexport type BranchViewName =\r\n  | \"_minimal\"\r\n  | \"_local\"\r\n  | \"_base\"\r\n  | \"branch-view\"\r\n  | \"branch-account\";\r\nexport type BranchView<V extends BranchViewName> = V extends \"_minimal\"\r\n  ? Pick<Branch, \"id\" | \"name\">\r\n  : V extends \"_local\"\r\n  ? Pick<Branch, \"id\" | \"name\" | \"location\" | \"active\" | \"approved\">\r\n  : V extends \"_base\"\r\n  ? Pick<Branch, \"id\" | \"name\" | \"location\" | \"active\" | \"approved\">\r\n  : V extends \"branch-view\"\r\n  ? Pick<Branch, \"id\" | \"name\" | \"location\" | \"active\" | \"approved\" | \"users\">\r\n  : V extends \"branch-account\"\r\n  ? Pick<Branch, \"id\" | \"name\" | \"location\" | \"active\" | \"approved\" | \"account\">\r\n  : never;\r\n","export enum AccountType {\n  Customer = \"Customer\",\n  Bank = \"Bank\",\n  Main = \"Main\",\n  Provider = \"Provider\",\n  Other = \"Other\"\n}\n\nexport enum AppointmentStatus {\n  DRAFT = \"DRAFT\",\n  SUBMITTED = \"SUBMITTED\",\n  ACCEPTED = \"ACCEPTED\",\n  REFUSED = \"REFUSED\"\n}\n\nexport enum BookingStatus {\n  DRAFT = \"DRAFT\",\n  SUBMITTED = \"SUBMITTED\",\n  APPROVED = \"APPROVED\",\n  REFUSED = \"REFUSED\",\n  PROCESSING = \"PROCESSING\",\n  COMPLETED = \"COMPLETED\"\n}\n\nexport enum DocumentType {\n  CUSTOMER = \"CUSTOMER\",\n  EMPLOYEE = \"EMPLOYEE\",\n  GENERAL_INSTRUCTION = \"GENERAL_INSTRUCTION\",\n  PROCEDURE_MANUAL = \"PROCEDURE_MANUAL\",\n  PRINTED = \"PRINTED\",\n  VISA_APPLICATION = \"VISA_APPLICATION\"\n}\n\nexport enum ServiceType {\n  FLY = \"FLY\",\n  TOURISM = \"TOURISM\",\n  INSURANCE = \"INSURANCE\",\n  HOTEL = \"HOTEL\",\n  CAR = \"CAR\",\n  VISA = \"VISA\",\n  PvcCard = \"PvcCard\",\n  Hostess = \"Hostess\"\n}\n\nexport enum Status {\n  NEW = \"NEW\",\n  DRAFT = \"DRAFT\",\n  WAIT_DELETION = \"WAIT_DELETION\",\n  DELETED = \"DELETED\",\n  WAIT_ACTIVATION = \"WAIT_ACTIVATION\",\n  ACTIVE = \"ACTIVE\",\n  WAIT_INACTIVATION = \"WAIT_INACTIVATION\",\n  INACTIVE = \"INACTIVE\",\n  UPDATED = \"UPDATED\"\n}\n\nexport enum TransactionType {\n  Deposit = \"Deposit\",\n  Settlement = \"Settlement\",\n  Withdraw = \"Withdraw\",\n  Other = \"Other\",\n  Purchase = \"Purchase\",\n  Customer = \"Customer\",\n  Reversal = \"Reversal\",\n  Liquidity = \"Liquidity\",\n  Balance = \"Balance\"\n}\n\nexport enum VisitorStatus {\n  WAIT = \"WAIT\",\n  APPROVED = \"APPROVED\",\n  RECEIVED = \"RECEIVED\",\n  END = \"END\"\n}\n","import * as React from \"react\";\r\nimport { FormEvent } from \"react\";\r\nimport { Alert, Button, Card, Form, message, Modal, Cascader } from \"antd\";\r\nimport { observer } from \"mobx-react\";\r\nimport { BookingManagement } from \"./BookingManagement\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { IReactionDisposer, observable, reaction, toJS, action } from \"mobx\";\r\nimport {\r\n  FormattedMessage,\r\n  injectIntl,\r\n  WrappedComponentProps\r\n} from \"react-intl\";\r\n\r\nimport {\r\n  collection,\r\n  Field,\r\n  instance,\r\n  withLocalizedForm,\r\n  extractServerValidationErrors,\r\n  constructFieldsWithErrors,\r\n  clearFieldErrors,\r\n  MultilineText,\r\n  EntityProperty,\r\n  Msg,\r\n  MainStoreInjected,\r\n  injectMainStore,\r\n  getPropertyInfoNN,\r\n  getEnumCaption,\r\n  DataCollectionStore\r\n} from \"@cuba-platform/react\";\r\n\r\nimport \"../../app/App.css\";\r\nimport { Booking } from \"../../cuba/entities/tagency_Booking\";\r\n\r\nimport { Service } from \"../../cuba/entities/tagency_Service\";\r\n\r\nimport { Branch } from \"../../cuba/entities/tagency_Branch\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport {  MetaPropertyInfo } from \"@cuba-platform/rest\";\r\nimport { BookingStatus, ServiceType } from \"../../cuba/enums/enums\";\r\nimport { CascaderOptionType, FilledFieldNamesType } from \"antd/lib/cascader\";\r\n\r\ntype Props = FormComponentProps & EditorProps;\r\n\r\ntype EditorProps = {\r\n  entityId: string;\r\n  readonly: boolean;\r\n};\r\n\r\n\r\n\r\nclass ReadOnlyView extends React.Component<{ booking: any }>\r\n{\r\n  fields = [\"createTs\", 'reason', \"information\", \"service\", \"branch\", \"status\"];\r\n  render() {\r\n    const data = this.props.booking;\r\n    if (data === undefined)\r\n      return null;\r\n    return (<div><>\r\n      {data.status !== BookingStatus.DRAFT && <EntityProperty\r\n        entityName={Booking.NAME}\r\n        propertyName='code'\r\n        value={data['code']}\r\n        key='code'\r\n      />}\r\n    </>\r\n      <>{this.fields.map(p => (\r\n        <EntityProperty\r\n          entityName={Booking.NAME}\r\n          propertyName={p}\r\n          value={data[p]}\r\n          key={p}\r\n        />))}\r\n      </>\r\n      <>\r\n        {data.status === BookingStatus.COMPLETED && <EntityProperty\r\n          entityName={Booking.NAME}\r\n          propertyName='transaction'\r\n          value={data['transaction']}\r\n          key='transaction'\r\n        />}\r\n      </>\r\n    </div>);\r\n  }\r\n}\r\n\r\nclass CloseButton extends React.Component<{ lableId: string }>\r\n{\r\n  render() {\r\n    return (<Link to={BookingManagement.PATH}>\r\n      <Button htmlType=\"button\">\r\n        <FormattedMessage id={this.props.lableId} />\r\n      </Button>\r\n    </Link>);\r\n  }\r\n}\r\n\r\ntype ServiceCascaderProps =\r\n{dataCollection: DataCollectionStore<Service>\r\n  , onChange?: (event: any)=>any | undefined,\r\n  value?: any};\r\n\r\n\r\n@injectMainStore\r\n@observer\r\nclass ServiceCascader extends React.Component<ServiceCascaderProps& MainStoreInjected>\r\n  {\r\n    @observable\r\n    dataCollection = this.props.dataCollection ;\r\n\r\n    onChange = (value: any)=>\r\n    {\r\n      if (this.props.onChange)\r\n      this.props.onChange({id:  value[1]});\r\n    }\r\n\r\n    render()\r\n    {\r\n      const {dataCollection }= this;\r\n      if (dataCollection.status === \"DONE\")\r\n      {\r\n        let value = this.props.value;\r\n        if (value)\r\n        {\r\n          if (value.id)  \r\n            value = value.id;\r\n          value = dataCollection.items.find(serv => serv.id == value);\r\n            if (value)\r\n              value = [value.type,value.id];\r\n        }\r\n        return (<Cascader   showSearch= {{filter: this.filter}} value={value}\r\n        options={this.buildServierTree()}\r\n        onChange ={this.onChange}/>)\r\n      }\r\n      else\r\n      return null;\r\n  }\r\n    buildServierTree = (): CascaderOptionType[] => {\r\n      const propertyInfo: MetaPropertyInfo = getPropertyInfoNN('type',Service.NAME,this.props.mainStore!.metadata!);\r\n      const {enums} = this.props.mainStore!;\r\n      let data = {};\r\n      //this.servicesDc.load();\r\n      this.dataCollection.items!.forEach((obj)=>{\r\n        const type: ServiceType = obj.type!;\r\n        let services: Array<Service> = data[type];\r\n        if (services === undefined)\r\n        {\r\n            services = [obj];\r\n            data[type] = services ;\r\n        }\r\n        else\r\n          services.push(obj);\r\n      });\r\n      let tree: CascaderOptionType[] = [];\r\n      Object.keys(data).forEach((typ: ServiceType)=>{\r\n          let childs = [];\r\n          const items = data[typ];\r\n          for(let index  in items)\r\n          {\r\n            const item =items[index];\r\n            //console.debug(item);\r\n              childs.push({value: item.id, label: item.name});\r\n          }\r\n          tree.push({label: getEnumCaption(typ,propertyInfo,enums!)!, value: typ, children: childs});\r\n      });\r\n      return tree;\r\n    }\r\n    \r\n    filter =(inputValue: string, path: CascaderOptionType[], names: FilledFieldNamesType):boolean =>  {\r\n      return  path.some(option => (option.label as string).toLowerCase().indexOf(inputValue.toLowerCase()) > -1);\r\n    }\r\n}\r\n\r\n@observer\r\n@injectMainStore\r\nclass BookingEditComponent extends React.Component<\r\nProps & WrappedComponentProps & MainStoreInjected ,{updated: boolean}\r\n> {\r\n  dataInstance = instance<Booking>(Booking.NAME, {\r\n    view: \"booking-customer-view\",\r\n    loadImmediately: false\r\n  });\r\nconstructor(props: any)\r\n{\r\n  super(props);\r\n  this.state= {updated: false};\r\n}\r\n  servicesDc = collection<Service>(Service.NAME, { view: \"_minimal\" });\r\n\r\n  branchsDc = collection<Branch>(Branch.NAME, { view: \"_minimal\" });\r\n\r\n\r\nupdate = ()=>this.setState({updated: true});\r\n  reactionDisposer: IReactionDisposer;\r\n\r\n  fields = ['reason', \"information\", \"service\", \"branch\"];\r\n\r\n  @observable\r\n  globalErrors: string[] = [];\r\n\r\n  handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (err) {\r\n        message.error(\r\n          this.props.intl.formatMessage({\r\n            id: \"management.editor.validationError\"\r\n          })\r\n        );\r\n        return;\r\n      }\r\n      this.dataInstance\r\n        .update(this.props.form.getFieldsValue(this.fields))\r\n        .then(() => {\r\n          message.success(\r\n            this.props.intl.formatMessage({ id: \"management.editor.success\" })\r\n          );\r\n          this.update();\r\n        })\r\n        .catch((e: any) => {\r\n          if (e.response && typeof e.response.json === \"function\") {\r\n            e.response.json().then((response: any) => {\r\n              clearFieldErrors(this.props.form);\r\n              const {\r\n                globalErrors,\r\n                fieldErrors\r\n              } = extractServerValidationErrors(response);\r\n              this.globalErrors = globalErrors;\r\n              if (fieldErrors.size > 0) {\r\n                this.props.form.setFields(\r\n                  constructFieldsWithErrors(fieldErrors, this.props.form)\r\n                );\r\n              }\r\n\r\n              if (fieldErrors.size > 0 || globalErrors.length > 0) {\r\n                message.error(\r\n                  this.props.intl.formatMessage({\r\n                    id: \"management.editor.validationError\"\r\n                  })\r\n                );\r\n              } else {\r\n                message.error(\r\n                  this.props.intl.formatMessage({\r\n                    id: \"management.editor.error\"\r\n                  })\r\n                );\r\n              }\r\n            });\r\n          } else {\r\n            message.error(\r\n              this.props.intl.formatMessage({ id: \"management.editor.error\" })\r\n            );\r\n          }\r\n        });\r\n    });\r\n  };\r\n\r\n\r\n\r\n  @observable\r\n  submited = false;\r\n\r\n  @action\r\n  confirm = () => {let dialog=\r\n    Modal.confirm({\r\n      title: this.props.intl.formatMessage(\r\n        { id: \"booking.submit.areYouSure\" },\r\n        { instanceName: this.dataInstance.item!._instanceName }\r\n      ),\r\n      okText: this.props.intl.formatMessage({\r\n        id: \"booking.submit.areYouSure.ok\"\r\n      }),\r\n      cancelText: this.props.intl.formatMessage({\r\n        id: \"booking.submit.areYouSure.cancel\"\r\n      }),\r\n      onOk: () => {\r\n        this.submited = true;\r\n        return this.dataInstance.update({ status: BookingStatus.SUBMITTED })\r\n          .then(() => {\r\n            message.success(\r\n              this.props.intl.formatMessage({ id: \"booking.success\" })\r\n            );\r\n            this.update();\r\n          })\r\n          .catch(() => {\r\n            message.error(\r\n              this.props.intl.formatMessage({ id: \"booking.error\" }));\r\n            this.submited = false;\r\n          }\r\n          )\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n\r\n//loading={status === \"LOADING\"}\r\n  render() {\r\n    //console.debug('sttus '+this.dataInstance.status);\r\n    if (this.state.updated === true) {\r\n      return <Redirect to={BookingManagement.PATH} />;\r\n    }\r\n    const { status } = this.dataInstance;\r\n    const item = this.dataInstance.item!;\r\n    const showSubmit = status === \"DONE\" && item.status === BookingStatus.DRAFT;\r\n    return (<Card className=\"narrow-layout\" >\r\n      {!this.props.readonly ?\r\n        <Form onSubmit={this.handleSubmit} layout=\"vertical\" >\r\n          <Field\r\n            entityName={Booking.NAME}\r\n            propertyName=\"reason\"\r\n            form={this.props.form}\r\n            formItemOpts={{ style: { marginBottom: \"12px\" }, }}\r\n            getFieldDecoratorOpts={{\r\n              rules: [{ required: true, max: 20 }]\r\n            }}\r\n          />\r\n          <Form.Item label={<Msg propertyName='information' entityName={Booking.NAME} key='information' />}\r\n            style={{ marginBottom: \"12px\" }}>\r\n            {this.props.form.getFieldDecorator('information')(<TextArea />)}\r\n          </Form.Item>\r\n           <Form.Item label={<Msg propertyName='service' entityName={Booking.NAME} key='service' />}\r\n            style={{ marginBottom: \"12px\" }} >\r\n            {this.props.form.getFieldDecorator('service',{\r\n              rules: [{required: true}]\r\n            })(<ServiceCascader dataCollection={this.servicesDc}  />)}\r\n          </Form.Item>\r\n\r\n          <Field\r\n            entityName={Booking.NAME}\r\n            propertyName=\"branch\"\r\n            form={this.props.form}\r\n            formItemOpts={{ style: { marginBottom: \"12px\" } }}\r\n            optionsContainer={this.branchsDc}\r\n            getFieldDecoratorOpts={{\r\n              rules: [{ required: true }]\r\n            }}\r\n          />\r\n\r\n          {this.globalErrors.length > 0 && (\r\n            <Alert\r\n              message={<MultilineText lines={toJS(this.globalErrors)} />}\r\n              type=\"error\"\r\n              style={{ marginBottom: \"24px\" }}\r\n            />\r\n          )}\r\n\r\n          <Form.Item style={{ textAlign: \"center\" }}>\r\n            <CloseButton lableId=\"management.editor.cancel\" />\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={status !== \"DONE\" && status !== \"ERROR\"}\r\n              loading={status === \"LOADING\"}\r\n              style={{ marginLeft: \"8px\" }}\r\n            >\r\n              <FormattedMessage id=\"management.editor.submit\" />\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n        :\r\n        <div>\r\n          <ReadOnlyView booking={item} />\r\n          <div style={{ marginTop: \"12px\" }}><CloseButton lableId=\"management.editor.close\" />\r\n            <Button\r\n              hidden={!showSubmit}\r\n              loading={this.submited}\r\n              type=\"primary\"\r\n              htmlType=\"button\"\r\n              style={{ marginLeft: \"8px\" }}\r\n              onClick={this.confirm}\r\n            >\r\n              <FormattedMessage id=\"booking.submit\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      }\r\n    </Card>\r\n\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.entityId !== BookingManagement.NEW_SUBPATH) {\r\n        this.dataInstance.load(this.props.entityId);\r\n    } else {\r\n      this.dataInstance.setItem(new Booking());\r\n    }\r\n    this.reactionDisposer = reaction(\r\n      () => {\r\n        return this.dataInstance.item;\r\n      },\r\n      () => {\r\n        this.props.form.setFieldsValue(\r\n          this.dataInstance.getFieldValues(this.fields)\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.reactionDisposer();\r\n  }\r\n}\r\n/*\r\n<Field\r\n            entityName={Booking.NAME}\r\n            propertyName=\"service\"\r\n            form={this.props.form}\r\n            formItemOpts={{ style: { marginBottom: \"12px\" }, }}\r\n            optionsContainer={this.servicesDc}\r\n            getFieldDecoratorOpts={{\r\n              rules: [{ required: true }]\r\n            }}\r\n          />\r\n          */\r\nexport default injectIntl(\r\n  withLocalizedForm<EditorProps>({\r\n    onValuesChange: (props: any, changedValues: any) => {\r\n      // Reset server-side errors when field is edited\r\n      Object.keys(changedValues).forEach((fieldName: string) => {\r\n        props.form.setFields({\r\n          [fieldName]: {\r\n            value: changedValues[fieldName]\r\n          }\r\n        });\r\n      });\r\n    }\r\n  })(BookingEditComponent)\r\n);\r\n\r\n","import * as React from \"react\";\r\n\r\nimport { observable } from \"mobx\";\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport { Modal, Button,message } from \"antd\";\r\n\r\nimport { Booking } from \"../../cuba/entities/tagency_Booking\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  collection,\r\n  injectMainStore,\r\n  MainStoreInjected,\r\n  DataTable,\r\n  getCubaREST\r\n} from \"@cuba-platform/react\";\r\n\r\nimport { SerializedEntity } from \"@cuba-platform/rest\";\r\nimport { BookingManagement } from \"./BookingManagement\";\r\nimport {\r\n  FormattedMessage,\r\n  injectIntl,\r\n  WrappedComponentProps\r\n} from \"react-intl\";\r\nimport { BookingStatus } from \"../../cuba/enums/enums\";\r\n\r\n@injectMainStore\r\n@observer\r\nclass BookingListComponent extends React.Component<\r\n  MainStoreInjected & WrappedComponentProps\r\n> {\r\n  dataCollection = collection<Booking>(Booking.NAME, {\r\n    view: \"booking-customer-view\",\r\n    sort: \"-createTs\"\r\n  });\r\n\r\n  fields = [\"createTs\",'code','reason',\"service\", \"branch\",\"status\"];\r\n\r\n  @observable selectedRowKey: string | undefined;\r\n\r\n  showDeletionDialog = (e: SerializedEntity<Booking>) => {\r\n    Modal.confirm({\r\n      title: this.props.intl.formatMessage(\r\n        { id: \"management.browser.delete.areYouSure\" },\r\n        { instanceName: e._instanceName }\r\n      ),\r\n      okText: this.props.intl.formatMessage({\r\n        id: \"management.browser.delete.ok\"\r\n      }),\r\n      cancelText: this.props.intl.formatMessage({\r\n        id: \"management.browser.delete.cancel\"\r\n      }),\r\n      onOk: () => {\r\n        this.selectedRowKey = undefined;\r\n\r\n        return this.dataCollection.delete(e);\r\n      }\r\n    });\r\n  };\r\n\r\nisSelectedDraft = ():boolean =>{\r\n  return this.selectedRowKey!= undefined && this.getRecordById(this.selectedRowKey!).status === BookingStatus.DRAFT;\r\n}\r\n\r\n\r\n  reserve = () => {\r\n    let booking = this.getRecordById(this.selectedRowKey!);\r\n    Modal.confirm({\r\n      title: this.props.intl.formatMessage(\r\n        { id: \"booking.submit.areYouSure\" },\r\n        { instanceName: booking._instanceName }\r\n      ),\r\n      okText: this.props.intl.formatMessage({\r\n        id: \"booking.submit.areYouSure.ok\"\r\n      }),\r\n      cancelText: this.props.intl.formatMessage({\r\n        id: \"booking.submit.areYouSure.cancel\"\r\n      }),\r\n      onOk: () => {\r\n        return getCubaREST()!.commitEntity(Booking.NAME,{id: booking.id, status: BookingStatus.SUBMITTED})\r\n        .then((book: any)=>{\r\n          message.success(\r\n            this.props.intl.formatMessage({ id: \"booking.success\" })\r\n          );\r\n          this.dataCollection.load();\r\n          }\r\n        )\r\n        .catch(() => {\r\n          message.error(\r\n            this.props.intl.formatMessage({ id: \"booking.error\" }));\r\n        });\r\n  }\r\n});\r\n}\r\n\r\n  render() {\r\n\r\n    const buttons = [\r\n      <Link\r\n        to={BookingManagement.PATH + \"/edit/\" + BookingManagement.NEW_SUBPATH}\r\n        key=\"create\"\r\n      >\r\n        <Button\r\n          htmlType=\"button\"\r\n          style={{ margin: \"0 12px 12px 0\" }}\r\n          type=\"primary\"\r\n          icon=\"plus\"\r\n        >\r\n          <span>\r\n            <FormattedMessage id=\"management.browser.create\" />\r\n          </span>\r\n        </Button>\r\n      </Link>,\r\n      <Link to={BookingManagement.PATH + \"/edit/\" + this.selectedRowKey} key=\"edit\">\r\n        <Button\r\n          htmlType=\"button\"\r\n          style={{ margin: \"0 12px 12px 0\" }}\r\n          disabled={!this.isSelectedDraft()}\r\n          type=\"default\"\r\n        >\r\n          <FormattedMessage id=\"management.browser.edit\" />\r\n        </Button>\r\n      </Link>,\r\n      <Link to={BookingManagement.PATH + \"/view/\" + this.selectedRowKey} key=\"open\">\r\n      <Button\r\n        htmlType=\"button\"\r\n        style={{ margin: \"0 12px 12px 0\" }}\r\n        disabled={!this.selectedRowKey}\r\n        type=\"default\"\r\n      >\r\n        <FormattedMessage id=\"management.browser.open\" />\r\n      </Button>\r\n    </Link>,\r\n      <Button\r\n        htmlType=\"button\"\r\n        style={{ margin: \"0 12px 12px 0\" }}\r\n        disabled={!this.isSelectedDraft()!}\r\n        type=\"primary\"\r\n        onClick = {this.reserve}\r\n      >\r\n        <FormattedMessage id=\"booking.submit\" />\r\n      </Button>,\r\n      <Button\r\n        htmlType=\"button\"\r\n        style={{ margin: \"0 12px 12px 0\" }}\r\n        disabled={!this.isSelectedDraft() }\r\n        onClick={this.deleteSelectedRow}\r\n        key=\"remove\"\r\n        type=\"default\"\r\n      >\r\n        <FormattedMessage id=\"management.browser.remove\" />\r\n      </Button>\r\n    ];\r\n\r\n    return (\r\n      <DataTable\r\n        dataCollection={this.dataCollection}\r\n        fields={this.fields}\r\n        onRowSelectionChange={this.handleRowSelectionChange}\r\n        hideSelectionColumn={true}\r\n        buttons={buttons}\r\n      />\r\n    );\r\n  }\r\n\r\n  getRecordById(id: string): SerializedEntity<Booking> {\r\n    const record:\r\n      | SerializedEntity<Booking>\r\n      | undefined = this.dataCollection.items.find(record => record.id === id);\r\n\r\n    if (!record) {\r\n      throw new Error(\"Cannot find entity with id \" + id);\r\n    }\r\n\r\n    return record;\r\n  }\r\n\r\n  handleRowSelectionChange = (selectedRowKeys: string[]) => {\r\n    this.selectedRowKey = selectedRowKeys[0];\r\n  };\r\n\r\n  deleteSelectedRow = () => {\r\n    this.showDeletionDialog(this.getRecordById(this.selectedRowKey!));\r\n  };\r\n}\r\n\r\nconst BookingList = injectIntl(BookingListComponent);\r\n\r\nexport default BookingList;\r\n","import * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { observer } from \"mobx-react\";\r\nimport BookingEdit from \"./BookingEdit\";\r\nimport BookingList from \"./BookingList\";\r\n\r\ntype Props = RouteComponentProps<{ entityId?: string ,action: string}>;\r\n\r\n@observer\r\nexport class BookingManagement extends React.Component<Props> {\r\n  static PATH = \"/bookingManagement\";\r\n  static NEW_SUBPATH = \"new\";\r\n\r\n  render() {\r\n    const { entityId,action } = this.props.match.params;\r\n    return (\r\n      <>{entityId ? <BookingEdit readonly={action ===\"view\"} entityId={entityId} /> : <BookingList />}</>\r\n    );\r\n  }\r\n}\r\n","import { CubaApp, FetchOptions } from \"@cuba-platform/rest\";\n\nexport var restQueries = {\n  Customer: {\n    loadCustomerInformation: (\n      cubaApp: CubaApp,\n      fetchOpts?: FetchOptions\n    ) => () => {\n      return cubaApp.query(\n        \"tagency_Customer\",\n        \"loadCustomerInformation\",\n        {},\n        fetchOpts\n      );\n    },\n    loadCustomerInformationCount: (\n      cubaApp: CubaApp,\n      fetchOpts?: FetchOptions\n    ) => () => {\n      return cubaApp.queryCount(\n        \"tagency_Customer\",\n        \"loadCustomerInformation\",\n        {},\n        fetchOpts\n      );\n    },\n    loadCustomerInformationWithCount: (\n      cubaApp: CubaApp,\n      fetchOpts?: FetchOptions\n    ) => () => {\n      return cubaApp.queryWithCount(\n        \"tagency_Customer\",\n        \"loadCustomerInformation\",\n        {},\n        fetchOpts\n      );\n    }\n  },\n  Transction: {\n    loadCustomerTransaction: (\n      cubaApp: CubaApp,\n      fetchOpts?: FetchOptions\n    ) => () => {\n      return cubaApp.query(\n        \"tagency_Transction\",\n        \"loadCustomerTransaction\",\n        {},\n        fetchOpts\n      );\n    },\n    loadCustomerTransactionCount: (\n      cubaApp: CubaApp,\n      fetchOpts?: FetchOptions\n    ) => () => {\n      return cubaApp.queryCount(\n        \"tagency_Transction\",\n        \"loadCustomerTransaction\",\n        {},\n        fetchOpts\n      );\n    },\n    loadCustomerTransactionWithCount: (\n      cubaApp: CubaApp,\n      fetchOpts?: FetchOptions\n    ) => () => {\n      return cubaApp.queryWithCount(\n        \"tagency_Transction\",\n        \"loadCustomerTransaction\",\n        {},\n        fetchOpts\n      );\n    }\n  },\n  Price: {\n    loadPrices: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => () => {\n      return cubaApp.query(\"tagency_Price\", \"loadPrices\", {}, fetchOpts);\n    },\n    loadPricesCount: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => () => {\n      return cubaApp.queryCount(\"tagency_Price\", \"loadPrices\", {}, fetchOpts);\n    },\n    loadPricesWithCount: (cubaApp: CubaApp, fetchOpts?: FetchOptions) => () => {\n      return cubaApp.queryWithCount(\n        \"tagency_Price\",\n        \"loadPrices\",\n        {},\n        fetchOpts\n      );\n    }\n  }\n};\n","import * as React from \"react\";\r\nimport { getCubaREST, EntityProperty } from \"@cuba-platform/react\";\r\nimport { Customer } from \"../../cuba/entities/tagency_Customer\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable, action } from \"mobx\";\r\nimport { SerializedEntityProps } from \"@cuba-platform/rest\";\r\nimport { Card, message } from \"antd\";\r\nimport { FormattedMessage, WrappedComponentProps, injectIntl } from \"react-intl\";\r\nimport { restQueries } from \"../../cuba/queries\";\r\n@observer\r\nclass Information extends React.Component<WrappedComponentProps> {\r\n\r\n\r\n  customer: Customer;\r\n\r\n  fields = ['code',\r\n  'firstName','name','lastName','email','phone','passport','registerDate','marketer','birthDay','placeBirth'];\r\n\r\n  @observable\r\n  loading = true;\r\n\r\n  @observable\r\n  error = false;\r\n\r\n  data: SerializedEntityProps;\r\n\r\n  render() {\r\n      if (this.error === true)\r\n      {\r\n        message.error(this.props.intl.formatMessage({id: \"information.failed\"}));\r\n        return null;\r\n       }/*\r\n      if (this.loading === true) {\r\n        return <Icon type=\"spin\" />\r\n      }*/\r\n      const {loading} = this; \r\n      return (\r\n            <Card className=\"narrow-layout\" loading={this.loading} title={<FormattedMessage id=\"information.title\" />}>\r\n              {!this.loading &&\r\n              this.fields.map(p => (\r\n                <EntityProperty\r\n                  entityName={Customer.NAME}\r\n                  propertyName={p}\r\n                  value={this.data[p]}\r\n                  key={p}\r\n                />\r\n              ))}\r\n            </Card>);\r\n    }\r\n\r\n  componentDidMount()\r\n  {\r\n    restQueries\r\n      .Customer\r\n        .loadCustomerInformation(getCubaREST()!)()\r\n          .then(action((values: any)=>{\r\n            this.data = values[0];\r\n            this.loading = false;\r\n          }))\r\n          .catch(action(()=>{this.error=true}));    \r\n  }\r\n}\r\n\r\nexport default injectIntl(Information);\r\n","import { PriceCards } from \"./app/price/PriceCards\";\r\nimport { TransctionManagement } from \"./app/transaction/TransctionManagement\";\r\nimport { BookingManagement } from \"./app/booking/BookingManagement\";\r\n//import { Powered } from \"./app/powered/Powered\";\r\nimport { getMenuItems } from \"@cuba-platform/react\";\r\nimport Information from \"./app/information/Information\";\r\n\r\nexport const menuItems = getMenuItems();\r\n\r\n// Code below demonstrates how we can create SubMenu section\r\n// Remove '/*' '*/' comments and restart app to get this block in menu\r\n\r\n/*\r\n// This is RouteItem object that we want to see in User Settings sub menu\r\nconst backToHomeRouteItem = {\r\n  pathPattern: \"/backToHome\",\r\n  menuLink: \"/\",\r\n  component: null,\r\n  caption: \"home\"\r\n};\r\n// SubMenu object\r\nconst userSettingsSubMenu = {\r\n  caption: 'UserSettings', // add router.UserSettings key to src/i18n/en.json for valid caption\r\n  items: [backToHomeRouteItem]};\r\n// Add sub menu item to menu config\r\nmenuItems.push(userSettingsSubMenu);\r\n*/\r\n\r\nmenuItems.push({\r\n  pathPattern: \"/information\",\r\n  menuLink: \"/information\",\r\n  component: Information,\r\n  caption: \"Information\"\r\n});\r\n\r\nmenuItems.push({\r\n  pathPattern: \"/bookingManagement/:action?/:entityId?\",\r\n  menuLink: \"/bookingManagement\",\r\n  component: BookingManagement,\r\n  caption: \"BookingManagement\"\r\n});\r\n\r\nmenuItems.push({\r\n  pathPattern: \"/transctionManagement/:entityId?\",\r\n  menuLink: \"/transctionManagement\",\r\n  component: TransctionManagement,\r\n  caption: \"TransctionManagement\"\r\n});\r\n\r\nmenuItems.push({\r\n  pathPattern: \"/priceCards\",\r\n  menuLink: \"/priceCards\",\r\n  component: PriceCards,\r\n  caption: \"PriceCards\"\r\n});\r\n\r\n\r\n","import { Icon } from \"antd\";\nimport Centered from \"./common/Centered\";\nimport * as React from \"react\";\n\nexport class CenteredLoader extends React.Component {\n  render() {\n    return (\n      <Centered>\n        <Icon type=\"loading\" style={{ fontSize: 24 }} spin={true} />\n      </Centered>\n    );\n  }\n}\n","/* Reducer build to avoid giant switch */\r\nexport const createReducer = (reducer, state, action) =>\r\n  reducer[action.type] ? reducer[action.type](state, action) : state;\r\n","import { Map } from 'immutable';\r\n\r\nimport { createReducer } from '../../utils/store';\r\n\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = Map({ showChat: false, disabledInput: false, msgLoader: false ,pulse: 0,disabledButton: true});\r\n\r\nconst behaviorReducer = {\r\n  [actionTypes.TOGGLE_CHAT]: state =>\r\n    state.update('showChat', showChat => !showChat),\r\n\r\n    [actionTypes.NOTIFIY_CONNECTED]: state =>\r\n    state.update('pulse', pulse => pulse+1),\r\n\r\n    [actionTypes.NOTIFIY_DISCONNECTED]: state =>\r\n    state.update('pulse', value => 0),\r\n\r\n  [actionTypes.TOGGLE_INPUT_DISABLED]: state =>\r\n    state.update('disabledInput', disabledInput => !disabledInput),\r\n\r\n  [actionTypes.TOGGLE_BUTTON_DISABLED]: state =>\r\n    state.update('disabledButton', disabledButton => !disabledButton),\r\n\r\n  [actionTypes.ENABLE_INPUT]: state =>\r\n    state.update('disabledInput', disabledInput => false),\r\n\r\n  [actionTypes.DISABLE_INPUT]: state =>\r\n    state.update('disabledInput', disabledInput => true),\r\n  [actionTypes.TOGGLE_MSG_LOADER]: state =>\r\n    state.update('msgLoader', msgLoader => !msgLoader)\r\n};\r\n\r\nexport default (state = initialState, action) => createReducer(behaviorReducer, state, action);\r\n","export const TOGGLE_CHAT = 'BEHAVIOR/TOGGLE_CHAT';\r\nexport const TOGGLE_INPUT_DISABLED = 'BEHAVIOR/TOGGLE_INPUT_DISABLED';\r\nexport const TOGGLE_BUTTON_DISABLED = 'BEHAVIOR/TOGGLE_BUTTON_DISABLED';\r\nexport const DISABLE_INPUT = 'BEHAVIOR/DISABLE_INPUT';\r\nexport const ENABLE_INPUT = 'BEHAVIOR/ENABLE_INPUT';\r\nexport const TOGGLE_MSG_LOADER = 'BEHAVIOR/TOGGLE_MSG_LOADER';\r\nexport const ADD_NEW_USER_MESSAGE = 'MESSAGES/ADD_NEW_USER_MESSAGE';\r\nexport const ADD_NEW_RESPONSE_MESSAGE = 'MESSAGES/ADD_NEW_RESPONSE_MESSAGE';\r\nexport const ADD_NEW_LINK_SNIPPET = 'MESSAGES/ADD_NEW_LINK_SNIPPET';\r\nexport const ADD_COMPONENT_MESSAGE = 'MESSAGES/ADD_COMPONENT_MESSAGE';\r\nexport const DROP_MESSAGES = 'MESSAGES/DROP_MESSAGES';\r\nexport const HIDE_AVATAR = 'MESSAGES/HIDE_AVATAR';\r\nexport const SET_QUICK_BUTTONS = 'SET_QUICK_BUTTONS';\r\nexport const NOTIFIY_CONNECTED = 'BEHAVIOR/NOTIFY_CONNECTED';\r\nexport const NOTIFIY_DISCONNECTED = 'BEHAVIOR/NOTIFY_DISCONNECTED';\r\n","import PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\nexport const MESSAGE_SENDER = {\r\n  CLIENT: 'client',\r\n  RESPONSE: 'response'\r\n};\r\n\r\nexport const MESSAGES_TYPES = {\r\n  TEXT: 'text',\r\n  SNIPPET: {\r\n    LINK: 'snippet'\r\n  },\r\n  CUSTOM_COMPONENT: 'component'\r\n};\r\n\r\nexport const PROP_TYPES = {\r\n  MESSAGE: ImmutablePropTypes.contains({\r\n    type: PropTypes.oneOf([\r\n      MESSAGES_TYPES.TEXT,\r\n      MESSAGES_TYPES.SNIPPET.LINK\r\n    ]),\r\n    text: PropTypes.string,\r\n    sender: PropTypes.oneOf([\r\n      MESSAGE_SENDER.CLIENT,\r\n      MESSAGE_SENDER.RESPONSE\r\n    ])\r\n  }),\r\n\r\n  SNIPPET: ImmutablePropTypes.contains({\r\n    type: PropTypes.oneOf([\r\n      MESSAGES_TYPES.TEXT,\r\n      MESSAGES_TYPES.SNIPPET.LINK\r\n    ]),\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    sender: PropTypes.oneOf([\r\n      MESSAGE_SENDER.CLIENT,\r\n      MESSAGE_SENDER.RESPONSE\r\n    ])\r\n  })\r\n};\r\n\r\nexport const MESSAGE_BOX_SCROLL_DURATION = 400;\r\n","import React, { PureComponent } from 'react';\r\nimport markdownIt from 'markdown-it';\r\nimport markdownItSup from 'markdown-it-sup';\r\nimport markdownItSanitizer from 'markdown-it-sanitizer';\r\nimport markdownItLinkAttributes from 'markdown-it-link-attributes';\r\n\r\nimport { PROP_TYPES } from '../../../../../../../../constants';\r\n\r\nimport './styles.scss';\r\n\r\nclass Message extends PureComponent {\r\n  render() {\r\n    const sanitizedHTML = markdownIt({breaks: true})\r\n    .use(markdownItSup)\r\n    .use(markdownItSanitizer)\r\n    .use(markdownItLinkAttributes, { attrs: { target: '_blank', rel: 'noopener' } })\r\n    .render(this.props.message.get('text'));\r\n\r\n    return (\r\n      <div className={`rcw-${this.props.message.get('sender')}`}>\r\n        <div className=\"rcw-message-text\" dangerouslySetInnerHTML={{ __html: sanitizedHTML }} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMessage.propTypes = {\r\n  message: PROP_TYPES.MESSAGE\r\n};\r\n\r\nexport default Message;\r\n","import React, { PureComponent } from 'react';\r\nimport { PROP_TYPES } from '../../../../../../../../constants';\r\n\r\nimport './styles.scss';\r\n\r\nclass Snippet extends PureComponent {\r\n  render() {\r\n    return (\r\n      <div className=\"rcw-snippet\">\r\n        <h5 className=\"rcw-snippet-title\">\r\n          { this.props.message.get('title') }\r\n        </h5>\r\n        <div className=\"rcw-snippet-details\">\r\n          <a href={this.props.message.get('link')} target={this.props.message.get('target')} className=\"rcw-link\">\r\n            { this.props.message.get('link') }\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSnippet.propTypes = {\r\n  message: PROP_TYPES.SNIPPET\r\n};\r\n\r\nexport default Snippet;\r\n","import React, { Component } from 'react';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport { connect } from 'react-redux';\r\nimport './style.scss';\r\n\r\n\r\nclass QuickButtons extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.getComponentToRender = this.getComponentToRender.bind(this);\r\n  }\r\n\r\n  getComponentToRender(button) {\r\n    const ComponentToRender = button.get('component');\r\n    return (\r\n      <ComponentToRender\r\n        onQuickButtonClicked={this.props.onQuickButtonClicked}\r\n        button={button}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.buttons.size) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"quick-buttons-container\">\r\n        <ul className=\"quick-buttons\">\r\n          {\r\n            this.props.buttons.map((button, index) =>\r\n              <li className=\"quick-list-button\" key={index}>\r\n                {this.getComponentToRender(button)}\r\n              </li>\r\n            )\r\n          }\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nQuickButtons.propTypes = {\r\n  buttons: ImmutablePropTypes.listOf(ImmutablePropTypes.map),\r\n};\r\n\r\n\r\nexport default connect((store) => ({\r\n  buttons: store.quickButtons\r\n}))(QuickButtons);\r\n","import { Map } from 'immutable';\r\nimport { MESSAGES_TYPES, MESSAGE_SENDER, MESSAGE_BOX_SCROLL_DURATION } from '../constants';\r\nimport Message from '../components/widget/components/Conversation/components/Messages/components/Message';\r\nimport Snippet from '../components/widget/components/Conversation/components/Messages/components/Snippet';\r\nimport QuickButton from '../components/widget/components/Conversation/components/QuickButtons'\r\n\r\nexport function createNewMessage(text, sender) {\r\n  return Map({\r\n    type: MESSAGES_TYPES.TEXT,\r\n    component: Message,\r\n    text,\r\n    sender,\r\n    showAvatar: sender === MESSAGE_SENDER.RESPONSE\r\n  });\r\n}\r\n\r\nexport function createLinkSnippet(link) {\r\n  return Map({\r\n    type: MESSAGES_TYPES.SNIPPET.LINK,\r\n    component: Snippet,\r\n    title: link.title,\r\n    link: link.link,\r\n    target: link.target || '_blank',\r\n    sender: MESSAGE_SENDER.RESPONSE,\r\n    showAvatar: true\r\n  });\r\n}\r\n\r\nexport function createComponentMessage(component, props, showAvatar) {\r\n  return Map({\r\n    type: MESSAGES_TYPES.CUSTOM_COMPONENT,\r\n    component,\r\n    props,\r\n    sender: MESSAGE_SENDER.RESPONSE,\r\n    showAvatar\r\n  });\r\n}\r\n\r\n/**\r\n * Easing Functions\r\n * @param {*} t timestamp\r\n * @param {*} b begining\r\n * @param {*} c change\r\n * @param {*} d duration\r\n */\r\nfunction sinEaseOut(t, b, c, d) {\r\n  return c * ((t = t / d - 1) * t * t + 1) + b;\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} target scroll target\r\n * @param {*} scrollStart\r\n * @param {*} scroll scroll distance\r\n */\r\nfunction scrollWithSlowMotion(target, scrollStart, scroll) {\r\n  const raf = window.webkitRequestAnimationFrame || window.requestAnimationFrame\r\n  let start = null\r\n  const step = (timestamp) => {\r\n    if (!start) {\r\n      start = timestamp\r\n    }\r\n    let stepScroll = sinEaseOut(timestamp - start, 0, scroll, MESSAGE_BOX_SCROLL_DURATION)\r\n    let total = scrollStart + stepScroll\r\n    target.scrollTop = total;\r\n    if (total < scrollStart + scroll) {\r\n      raf(step)\r\n    }\r\n  }\r\n  raf(step)\r\n}\r\n\r\nexport function scrollToBottom(messagesDiv) {\r\n  if (!messagesDiv) return;\r\n  const screenHeight = messagesDiv.clientHeight;\r\n  const scrollTop = messagesDiv.scrollTop;\r\n\r\n  const scrollOffset = messagesDiv.scrollHeight - (scrollTop + screenHeight)\r\n\r\n  scrollOffset && scrollWithSlowMotion(messagesDiv, scrollTop, scrollOffset);\r\n}\r\n\r\n\r\nexport function createQuickButton(button) {\r\n  return Map({\r\n    component: QuickButton,\r\n    label: button.label,\r\n    value: button.value\r\n  });\r\n}\r\n","import { List } from 'immutable';\r\n\r\nimport { createReducer } from '../../utils/store';\r\nimport { createNewMessage, createLinkSnippet, createComponentMessage } from '../../utils/messages';\r\nimport { MESSAGE_SENDER } from '../../constants';\r\n\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = List([]);\r\n\r\nconst messagesReducer = {\r\n  [actionTypes.ADD_NEW_USER_MESSAGE]: (state, { text }) =>\r\n    {\r\n      return state.push(createNewMessage(text, MESSAGE_SENDER.CLIENT))\r\n    },\r\n\r\n  [actionTypes.ADD_NEW_RESPONSE_MESSAGE]: (state, { text }) =>\r\n    state.push(createNewMessage(text, MESSAGE_SENDER.RESPONSE)),\r\n\r\n  [actionTypes.ADD_NEW_LINK_SNIPPET]: (state, { link }) =>\r\n    state.push(createLinkSnippet(link, MESSAGE_SENDER.RESPONSE)),\r\n\r\n  [actionTypes.ADD_COMPONENT_MESSAGE]: (state, { component, props, showAvatar }) =>\r\n    state.push(createComponentMessage(component, props, showAvatar)),\r\n\r\n  [actionTypes.DROP_MESSAGES]: () => List([]),\r\n\r\n  [actionTypes.HIDE_AVATAR]: (state, { index }) =>\r\n    state.update(index, message => message.set('showAvatar', false))\r\n}\r\n\r\nexport default (state = initialState, action) => createReducer(messagesReducer, state, action);\r\n","import { List } from 'immutable';\r\nimport { createReducer } from '../../utils/store';\r\nimport { createQuickButton } from '../../utils/messages';\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = List([]);\r\n\r\nconst quickButtonsReducer = {\r\n  [actionTypes.SET_QUICK_BUTTONS]: ( state, action ) => \r\n    List(action.buttons.map(button => createQuickButton(button)))\r\n}\r\n\r\nexport default (state = initialState, action) => createReducer(quickButtonsReducer, state, action);\r\n","import { createStore,combineReducers} from 'redux';\r\n\r\nimport behavior from './reducers/behaviorReducer';\r\nimport messages from './reducers/messagesReducer';\r\nimport quickButtons from './reducers/quickButtonsReducer';\r\n\r\nconst reducer = combineReducers({ behavior, messages, quickButtons });\r\n\r\nexport default createStore(\r\n  reducer,\r\n  process.env.NODE_ENV !== 'production' ?\r\n    /* eslint-disable no-underscore-dangle */\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__() : ''\r\n    /* eslint-enable */\r\n);\r\n","import store from './store';\r\nimport * as actions from './actions';\r\n\r\nexport function addUserMessage(text) {\r\n  store.dispatch(actions.addUserMessage(text));\r\n}\r\n\r\nexport function addResponseMessage(text) {\r\n  store.dispatch(actions.addResponseMessage(text));\r\n}\r\n\r\nexport function addLinkSnippet(link) {\r\n  store.dispatch(actions.addLinkSnippet(link));\r\n}\r\n\r\nexport function toggleMsgLoader() {\r\n  store.dispatch(actions.toggleMsgLoader());\r\n}\r\n\r\nexport function renderCustomComponent(component, props, showAvatar = false) {\r\n  store.dispatch(actions.renderCustomComponent(component, props, showAvatar));\r\n}\r\n\r\nexport function toggleWidget() {\r\n  store.dispatch(actions.toggleChat());\r\n}\r\n\r\nexport function toggleInputDisabled() {\r\n  store.dispatch(actions.toggleInputDisabled());\r\n}\r\n\r\nexport function toggleButtonDisabled() {\r\n  store.dispatch(actions.toggleButtonDisabled());\r\n}\r\n\r\nexport function enableInput() {\r\n  store.dispatch(actions.enableInput());\r\n}\r\n\r\nexport function disableInput() {\r\n  store.dispatch(actions.disableInput());\r\n}\r\n\r\nexport function notifyConnected() {\r\n  store.dispatch(actions.notifyConnected());\r\n}\r\n\r\nexport function notifyDisconnected() {\r\n  store.dispatch(actions.notifyDisconnected());\r\n}\r\n\r\nexport function dropMessages() {\r\n  store.dispatch(actions.dropMessages());\r\n}\r\n\r\nexport function isWidgetOpened() {\r\n  return store.getState().behavior.get('showChat');\r\n}\r\n\r\nexport function isButtonEnabled() {\r\n  return !store.getState().behavior.get('disabledButton');\r\n}\r\n\r\nexport function setQuickButtons(buttons) {\r\n  store.dispatch(actions.setQuickButtons(buttons));\r\n}\r\n","import * as actions from './actionTypes';\r\n\r\nexport function toggleChat() {\r\n  return {\r\n    type: actions.TOGGLE_CHAT\r\n  };\r\n}\r\n\r\nexport function toggleInputDisabled() {\r\n  return {\r\n    type: actions.TOGGLE_INPUT_DISABLED\r\n  };\r\n}\r\n\r\nexport function toggleButtonDisabled() {\r\n  return {\r\n    type: actions.TOGGLE_BUTTON_DISABLED\r\n  };\r\n}\r\n\r\nexport function enableInput() {\r\n  return {\r\n    type: actions.ENABLE_INPUT\r\n  };\r\n}\r\n\r\n  export function disableInput() {\r\n    return {\r\n      type: actions.DISABLE_INPUT\r\n    };\r\n  }\r\n\r\n  export function notifyConnected() {\r\n    return {\r\n      type: actions.NOTIFIY_CONNECTED\r\n    };\r\n  }\r\n\r\n  export function notifyDisconnected() {\r\n    return {\r\n      type: actions.NOTIFIY_DISCONNECTED\r\n    };\r\n  }\r\n\r\nexport function addUserMessage(text) {\r\n  return {\r\n    type: actions.ADD_NEW_USER_MESSAGE,\r\n    text: text.trim()\r\n  };\r\n}\r\n\r\nexport function addResponseMessage(text) {\r\n  return {\r\n    type: actions.ADD_NEW_RESPONSE_MESSAGE,\r\n    text\r\n  };\r\n}\r\n\r\nexport function toggleMsgLoader() {\r\n  return {\r\n    type: actions.TOGGLE_MSG_LOADER\r\n  }\r\n}\r\n\r\nexport function addLinkSnippet(link) {\r\n  return {\r\n    type: actions.ADD_NEW_LINK_SNIPPET,\r\n    link\r\n  };\r\n}\r\n\r\nexport function renderCustomComponent(component, props, showAvatar) {\r\n  return {\r\n    type: actions.ADD_COMPONENT_MESSAGE,\r\n    component,\r\n    props,\r\n    showAvatar\r\n  };\r\n}\r\n\r\nexport function dropMessages() {\r\n  return {\r\n    type: actions.DROP_MESSAGES\r\n  };\r\n}\r\n\r\nexport function hideAvatar() {\r\n  return {\r\n    type: actions.HIDE_AVATAR\r\n  };\r\n}\r\n\r\nexport function setQuickButtons(buttons) {\r\n  return {\r\n    type: actions.SET_QUICK_BUTTONS,\r\n    buttons\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.scss';\r\n\r\nconst Badge = ({ badge }) => (\r\n  badge > 0 &&\r\n  <span className=\"rcw-badge\">{badge}</span>\r\n);\r\n\r\nBadge.propTypes = {\r\n  badge: PropTypes.number\r\n};\r\n\r\nexport default Badge;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport openLauncher from './../../../assets/launcher_button.svg';\r\nimport close from './../../../assets/clear-button.svg';\r\nimport Badge from './components/Badge';\r\nimport './style.scss';\r\nimport { Bounce, Zoom } from \"react-awesome-reveal\";\r\n\r\n/*\r\nconst Button = ({ toggle, chatOpened, badge }) =>\r\n(<button type=\"button\" className={chatOpened ? 'rcw-launcher rcw-hide-sm' : 'rcw-launcher'} onClick={toggle}>\r\n  <Badge badge={badge} />\r\n  {chatOpened ?\r\n    <img src={close} className=\"rcw-close-launcher\" alt=\"\" /> :\r\n    <img src={openLauncher} className=\"rcw-open-launcher\" alt=\"\" />\r\n  }\r\n</button>)\r\n/*\r\nconst Launcher = ({ toggle, chatOpened, badge }) =>\r\n  <Button toggle={toggle} chatOpened={chatOpened} badge={badge}/>\r\n*/\r\n\r\nconst Launcher = ({ toggle, chatOpened, badge}) =>\r\n  <Bounce>\r\n    <button type=\"button\" className={chatOpened ? 'rcw-launcher rcw-hide-sm' : 'rcw-launcher'} onClick={toggle}>\r\n  <Badge badge={badge} />\r\n  {chatOpened ?\r\n    <img src={close} className=\"rcw-close-launcher\" alt=\"\" /> :\r\n    <img src={openLauncher} className=\"rcw-open-launcher\" alt=\"\" />\r\n  }\r\n</button>\r\n  </Bounce>\r\n  //if (pulse>0)\r\n  //{\r\n  //  <Bounce >\r\n  //  <Button toggle={toggle} chatOpened={chatOpened} badge={badge}/>\r\n  //</Bounce>\r\n  //}\r\n  /*else\r\n  {\r\n    return <Button toggle={toggle} chatOpened={chatOpened} badge={badge}/>;\r\n  }*/\r\n\r\nLauncher.propTypes = {\r\n  toggle: PropTypes.func,\r\n  chatOpened: PropTypes.bool,\r\n  badge: PropTypes.number,\r\n  //pulse: PropTypes.number\r\n};\r\n\r\nexport default connect(store => ({\r\n  chatOpened: store.behavior.get('showChat'),\r\n  //pulse: store.behavior.get('pulse')\r\n}))(Launcher);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport close from '../../../../../assets/clear-button.svg';\r\n\r\nimport './style.scss';\r\n\r\n\r\nconst Header = ({ title, subtitle, toggleChat, showCloseButton, titleAvatar }) =>\r\n  <div className=\"rcw-header\">\r\n    {showCloseButton &&\r\n      <button className=\"rcw-close-button\" onClick={toggleChat}>\r\n        <img src={close} className=\"rcw-close\" alt=\"close\" />\r\n      </button>\r\n    }\r\n    <h4 className=\"rcw-title\">\r\n      {titleAvatar && <img src={titleAvatar} className=\"avatar\" alt=\"profile\" />}\r\n      {title}\r\n    </h4>\r\n    <span>{subtitle}</span>\r\n  </div>;\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.string,\r\n  toggleChat: PropTypes.func,\r\n  showCloseButton: PropTypes.bool,\r\n  titleAvatar: PropTypes.string\r\n};\r\nexport default Header;\r\n","import React from 'react'; \r\nimport PropTypes from 'prop-types';\r\n\r\nimport './styles.scss';\r\n\r\nconst Loader = props => \r\n<div className={`loader ${props.typing && 'active'}`}>\r\n  <div className=\"loader-container\">\r\n    <span className=\"loader-dots\"></span>\r\n    <span className=\"loader-dots\"></span>\r\n    <span className=\"loader-dots\"></span>\r\n  </div>\r\n</div>;\r\n\r\nLoader.propTypes = {\r\n  typing: PropTypes.bool,\r\n};\r\n\r\nexport default Loader; \r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { hideAvatar } from '../../../../../../store/actions';\r\nimport { scrollToBottom } from '../../../../../../utils/messages';\r\n\r\nimport Loader from './components/Loader';\r\nimport './styles.scss';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nclass Messages extends Component {\r\n  componentDidMount() {\r\n    scrollToBottom(this.$message);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    scrollToBottom(this.$message);\r\n  }\r\n\r\n  $message = null\r\n\r\n  getComponentToRender = message => {\r\n    const ComponentToRender = message.get('component');\r\n    const previousMessage = this.props.messages.get()\r\n    if (message.get('type') === 'component') {\r\n      return <ComponentToRender {...message.get('props')} />;\r\n    }\r\n    return <ComponentToRender message={message} />;\r\n  };\r\n\r\n  shouldRenderAvatar = (message, index) => {\r\n    const previousMessage = this.props.messages.get(index - 1);\r\n    if (message.get('showAvatar') && previousMessage.get('showAvatar')) {\r\n      this.props.dispatch(hideAvatar(index));\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { messages, profileAvatar, typing } = this.props;\r\n    return (\r\n      <div id=\"messages\" className=\"rcw-messages-container\" ref={msg => this.$message = msg} ref={(ref) => this.scrollParentRef = ref}>\r\n        {messages.map((message, index) =>\r\n          <div className=\"rcw-message\" key={index}>\r\n            {profileAvatar &&\r\n              message.get('showAvatar') &&\r\n              <img src={profileAvatar} className=\"rcw-avatar\" alt=\"profile\" />\r\n            }\r\n            {this.getComponentToRender(message)}\r\n          </div>\r\n        )}\r\n        <Loader typing={typing} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMessages.propTypes = {\r\n  messages: ImmutablePropTypes.listOf(ImmutablePropTypes.map),\r\n  profileAvatar: PropTypes.string\r\n};\r\n\r\nexport default connect(store => ({\r\n  messages: store.messages,\r\n  typing: store.behavior.get('msgLoader')\r\n}))(Messages);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport send from '../../../../../assets/send_button.svg';\r\n\r\nimport './style.scss';\r\nimport { Observer } from 'mobx-react';\r\nimport { observable, action } from 'mobx';\r\n\r\nclass Sender extends Component{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {buttonDisabled: true};\r\n  }\r\n  \r\n  input = React.createRef();\r\n\r\n  componentDidUpdate() {\r\n    this.input.current.focus();\r\n  }\r\n\r\n\r\nonChange = (event)=>{\r\n  const content = event.target.value;\r\n  if (content != null && content.trim().length>0)\r\n  {\r\n    if (this.state.buttonDisabled)\r\n      this.toggeButtonDisabled();\r\n  }\r\n  else\r\n  {\r\n    if (!this.state.buttonDisabled)\r\n      this.toggeButtonDisabled();\r\n  }\r\n};\r\n\r\ntoggeButtonDisabled = ()=> this.setState((state,props)=>({buttonDisabled: !state.buttonDisabled}));\r\n\r\nonSubmit = (event)=>{\r\n  this.toggeButtonDisabled();\r\n  this.props.sendMessage(event);\r\n};\r\n\r\n  render() {\r\n    const { placeholder, disabledInput, autofocus } = this.props;\r\n    return (\r\n      <form className=\"rcw-sender\" onSubmit={this.onSubmit}>\r\n        <textarea type=\"text\" className=\"rcw-new-message\" name=\"message\" onChange={this.onChange} placeholder={placeholder} disabled={disabledInput} autoFocus={autofocus} autoComplete=\"off\" ref={this.input}/>\r\n        <button type=\"submit\" className=\"rcw-send\" disabled={this.state.buttonDisabled}>\r\n          <img src={send} className=\"rcw-send-icon\" alt=\"send\" />\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nSender.propTypes = {\r\n  sendMessage: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  disabledInput: PropTypes.bool,\r\n  autofocus: PropTypes.bool,\r\n  //disabledButton: PropTypes.bool\r\n};\r\n\r\nexport default (Sender);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Header from './components/Header';\r\nimport Messages from './components/Messages';\r\nimport Sender from './components/Sender';\r\nimport QuickButtons from './components/QuickButtons';\r\nimport './style.scss';\r\n\r\ntype ConversationProps =\r\n{\r\n\r\n    title: string,\r\n    titleAvatar: string,\r\n    subtitle: string,\r\n    sendMessage: ()=>{},\r\n    senderPlaceHolder:string,\r\n    profileAvatar: string,\r\n    toggleChat: ()=>{},\r\n    showCloseButton: boolean,\r\n    disabledInput: boolean,\r\n    autofocus: boolean,\r\n    onQuickButtonClicked: ()=>{}\r\n}\r\n\r\nclass Conversation  extends React.Component<ConversationProps>\r\n{\r\n  render()\r\n  {\r\n    return(\r\n  <div className=\"rcw-conversation-container\">\r\n    <Header\r\n      title={this.props.title}\r\n      subtitle={this.props.subtitle}\r\n      toggleChat={this.props.toggleChat}\r\n      showCloseButton={this.props.showCloseButton}\r\n      titleAvatar={this.props.titleAvatar}\r\n    />\r\n    <Messages\r\n      profileAvatar={this.props.profileAvatar}\r\n    />\r\n    <QuickButtons onQuickButtonClicked={this.props.onQuickButtonClicked} />\r\n    <Sender\r\n      sendMessage={this.props.sendMessage}\r\n      placeholder={this.props.senderPlaceHolder}\r\n      disabledInput={this.props.disabledInput}\r\n      autofocus={this.props.autofocus}\r\n    />\r\n  </div>);\r\n  }\r\n}\r\n\r\nexport default Conversation;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Launcher from './components/Launcher';\r\nimport './style.scss';\r\nimport Conversation from './components/Conversation/Conversation';\r\ntype WidgetLayoutProps = {\r\n  title: string,\r\n  titleAvatar: string,\r\n  subtitle: string,\r\n  onSendMessage: (...args: any[])=>any,\r\n  onToggleConversation:(...args: any[])=>any,\r\n  showChat: boolean,\r\n  senderPlaceHolder: string,\r\n  onQuickButtonClicked: (...args: any[])=>any,\r\n  profileAvatar: string,\r\n  showCloseButton: boolean,\r\n  disabledInput: boolean,\r\n  fullScreenMode: boolean,\r\n  badge: number,\r\n  autofocus: boolean,\r\n  connected: boolean,\r\n  customLauncher: (...args: any[])=>any\r\n};\r\nclass WidgetLayout extends React.Component<WidgetLayoutProps>\r\n{\r\n  render(){\r\n    return (\r\n  <div\r\n    className={\r\n      `rcw-widget-container ${this.props.fullScreenMode ? 'rcw-full-screen' : ''} ${this.props.showChat ? 'rcw-opened' : ''}`\r\n    }\r\n  >\r\n    {this.props.showChat &&\r\n      <Conversation\r\n        title={this.props.title}\r\n        subtitle={this.props.subtitle}\r\n        sendMessage={this.props.onSendMessage}\r\n        senderPlaceHolder={this.props.senderPlaceHolder}\r\n        onQuickButtonClicked={this.props.onQuickButtonClicked}\r\n        profileAvatar={this.props.profileAvatar}\r\n        toggleChat={this.props.onToggleConversation}\r\n        showCloseButton={this.props.showCloseButton}\r\n        disabledInput={this.props.disabledInput}\r\n        autofocus={this.props.autofocus}\r\n        titleAvatar={this.props.titleAvatar}\r\n      />\r\n    }\r\n    {this.props.customLauncher ?\r\n      this.props.customLauncher(this.props.onToggleConversation) :\r\n      !this.props.fullScreenMode &&\r\n      <Launcher\r\n        toggle={this.props.onToggleConversation}\r\n        badge={this.props.badge}\r\n      />\r\n    }\r\n  </div>\r\n);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default connect(store => ({\r\n  showChat: (store as any).behavior.get('showChat'),\r\n  disabledInput: (store as any).behavior.get('disabledInput')\r\n}))(WidgetLayout);\r\n","import React, { Component } from 'react';\r\nimport { connect,Provider } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { toggleChat, addUserMessage } from '../../store/actions';\r\n\r\nimport WidgetLayout from './layout';\r\n\r\nclass Widget extends Component {\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.fullScreenMode) {\r\n      this.props.dispatch(toggleChat());\r\n    }\r\n  }\r\n\r\n  toggleConversation = () => {\r\n    this.props.dispatch(toggleChat());\r\n  }\r\n\r\n  handleMessageSubmit = (event) => {\r\n    event.preventDefault();\r\n    const userInput = event.target.message.value;\r\n    if (userInput.trim()) {\r\n      //this.props.dispatch(addUserMessage(userInput));\r\n      this.props.handleNewUserMessage(userInput);\r\n    }\r\n    event.target.message.value = '';\r\n  }\r\n\r\n  handleQuickButtonClicked = (event, value) => {\r\n    event.preventDefault();\r\n\r\n    if(this.props.handleQuickButtonClicked) {\r\n      this.props.handleQuickButtonClicked(value);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <WidgetLayout\r\n        onToggleConversation={this.toggleConversation}\r\n        onSendMessage={this.handleMessageSubmit}\r\n        onQuickButtonClicked={this.handleQuickButtonClicked}\r\n        title={this.props.title}\r\n        titleAvatar={this.props.titleAvatar}\r\n        subtitle={this.props.subtitle}\r\n        senderPlaceHolder={this.props.senderPlaceHolder}\r\n        profileAvatar={this.props.profileAvatar}\r\n        showCloseButton={this.props.showCloseButton}\r\n        fullScreenMode={this.props.fullScreenMode}\r\n        badge={this.props.badge}\r\n        autofocus={this.props.autofocus}\r\n        customLauncher={this.props.customLauncher}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nWidget.propTypes = {\r\n  title: PropTypes.string,\r\n  titleAvatar: PropTypes.string,\r\n  subtitle: PropTypes.string,\r\n  handleNewUserMessage: PropTypes.func.isRequired,\r\n  handleQuickButtonClicked: PropTypes.func.isRequired,\r\n  senderPlaceHolder: PropTypes.string,\r\n  profileAvatar: PropTypes.string,\r\n  showCloseButton: PropTypes.bool,\r\n  fullScreenMode: PropTypes.bool,\r\n  badge: PropTypes.number,\r\n  autofocus: PropTypes.bool,\r\n  customLauncher: PropTypes.func\r\n};\r\n\r\nexport default connect()(Widget);\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport Widget from './components/widget/index';\r\nimport { observer } from 'mobx-react';\r\n\r\ntype func = (...args: any[])=>any;\r\n\r\ntype ConnectedWidgetProps = \r\n{\r\n  data: any;\r\n  title?: string,\r\n  titleAvatar?: string,\r\n  subtitle?: any,\r\n  handleNewUserMessage: func,\r\n  handleQuickButtonClicked?: func,\r\n  senderPlaceHolder?: string,\r\n  profileAvatar?: string,\r\n  showCloseButton?: boolean,\r\n  fullScreenMode?: boolean,\r\n  badge?: number,\r\n  autofocus?: boolean,\r\n  launcher?: func,\r\n  store: any\r\n};\r\n@observer\r\nclass ConnectedWidget extends React.Component<ConnectedWidgetProps >\r\n{\r\n \r\nrender()\r\n{return (\r\n  <Provider store={this.props.store}>\r\n    <Widget\r\n      title={this.props.title}\r\n      titleAvatar={this.props.titleAvatar}\r\n      subtitle={this.props.data.subtitle}\r\n      handleNewUserMessage={this.props.handleNewUserMessage}\r\n      handleQuickButtonClicked={this.props.handleQuickButtonClicked}\r\n      senderPlaceHolder={this.props.senderPlaceHolder}\r\n      profileAvatar={this.props.profileAvatar}\r\n      showCloseButton={this.props.showCloseButton}\r\n      fullScreenMode={this.props.fullScreenMode}\r\n      badge={this.props.data.badge}\r\n      autofocus={this.props.autofocus}\r\n      customLauncher={this.props.launcher}\r\n    />\r\n  </Provider>);\r\n}\r\n\r\n\r\n}\r\n\r\nexport default  ConnectedWidget;\r\n","import * as React from \"react\";\r\nimport \"./App.css\";\r\nimport { Icon, Layout, Menu } from \"antd\";\r\nimport { observer } from \"mobx-react\";\r\nimport Login from \"./login/Login\";\r\nimport Centered from \"./common/Centered\";\r\nimport AppHeader from \"./header/AppHeader\";\r\nimport { NavLink, Route, Switch } from \"react-router-dom\";\r\nimport HomePage from \"./home/HomePage\";\r\nimport { menuItems } from \"../routing\";\r\nimport {\r\n  injectMainStore,\r\n  MainStoreInjected,\r\n  RouteItem,\r\n  SubMenu,\r\n  getCubaREST\r\n} from \"@cuba-platform/react\";\r\nimport { CenteredLoader } from \"./CenteredLoader\";\r\nimport {\r\n  FormattedMessage,\r\n  injectIntl,\r\n  IntlFormatters,\r\n  WrappedComponentProps\r\n} from \"react-intl\";\r\nimport Powered from \"./powered/Powered\";\r\nimport { restServices } from \"../cuba/services\";\r\nimport { observable, action } from \"mobx\";\r\nimport { ChatMessage } from \"../cuba/entities/tagency_ChatMessage\";\r\nimport { addUserMessage, addResponseMessage, isWidgetOpened, disableInput,enableInput, notifyConnected, notifyDisconnected } from \"./chat/store/dispatcher\";\r\nimport ConnectedWidget from \"./chat/ConnectedWidget\";\r\nimport store  from './chat/store/store';\r\n\r\n\r\nclass Message\r\n{\r\n  id: string;\r\n  content: string;\r\n}\r\n@injectMainStore\r\n@observer\r\nclass AppComponent extends React.Component<\r\n  MainStoreInjected & WrappedComponentProps\r\n> {\r\n\r\n  onUserMessage = (msg: string)=>{\r\n    restServices.tagency_ChatService.sendMessage(getCubaREST()!)({groupId: this.chatGroupId,content: msg})\r\n    .then((cMsg : ChatMessage)=> addUserMessage(msg))\r\n    .catch((er)=>console.error(er))\r\n  }\r\n\r\n@observable\r\n chatGroupId :any = null;\r\n\r\n @observable\r\n markerterIsOnline: boolean;\r\n\r\n @observable\r\n unreadeMsg: number=0;\r\n\r\n @observable\r\nchatData = {subtitle: '',\r\n            badge: 0,\r\n            opened: false};\r\n  \r\n  connectedCount: number = 0;\r\n\r\nonQuickButtonClicked = (value:any ) => console.debug('click '+value)\r\n\r\n //@action\r\n loadGroupId = ()=> restServices.tagency_ChatService.getConnectedCustomerGroup(getCubaREST()!)().then((id)=>{\r\n   this.chatGroupId = id;\r\n   enableInput();\r\n }).catch((er)=>console.error(er))\r\n\r\n  render() {\r\n    const mainStore = this.props.mainStore!;\r\n    const { initialized, locale, loginRequired } = mainStore;\r\n\r\n    if (!initialized || !locale) {\r\n      if (this.chatGroupId !== null)\r\n        this.chatGroupId = null;\r\n      return <CenteredLoader />;\r\n    }\r\n\r\n    if (loginRequired) {\r\n      if (this.chatGroupId !== null)\r\n        this.chatGroupId = null;\r\n      return (\r\n        <Centered>\r\n          <Login />\r\n        </Centered>\r\n      );\r\n    }\r\n    this.loadGroupId();\r\n    const menuIdx = 1;\r\n\r\n    return (\r\n      <Layout className=\"main-layout\">\r\n        <Layout.Header>\r\n          <AppHeader />\r\n        </Layout.Header>\r\n        <Layout>\r\n          <Layout.Sider\r\n            width={200}\r\n            breakpoint=\"sm\"\r\n            collapsedWidth={0}\r\n            style={{ background: \"#fff\" }}\r\n          >\r\n            <Menu mode=\"inline\" style={{ height: \"100%\", borderRight: 0 }}>\r\n              <Menu.Item key={menuIdx}>\r\n                <NavLink to={\"/\"}>\r\n                  <Icon type=\"home\" />\r\n                  <FormattedMessage id=\"router.home\" />\r\n                </NavLink>\r\n              </Menu.Item>\r\n              {menuItems.map((item, idx) =>\r\n                menuItem(item, \"\" + (idx + 1 + menuIdx), this.props.intl)\r\n              )}\r\n            </Menu>\r\n          </Layout.Sider>\r\n          <Layout style={{ padding: \"24px 24px 24px\" }}>\r\n            <Layout.Content>\r\n              <Switch>\r\n                <Route exact={true} path=\"/\" component={HomePage} />\r\n                {collectRouteItems(menuItems).map(route => (\r\n                  <Route\r\n                    key={route.pathPattern}\r\n                    path={route.pathPattern}\r\n                    component={route.component}\r\n                  />\r\n                ))}\r\n              </Switch>\r\n              <ConnectedWidget\r\n                store={store}\r\n                title={this.props.intl.formatMessage({id: 'chat.title'})}\r\n                data = {this.chatData}\r\n                \r\n                  senderPlaceHolder= { this.props.intl.formatMessage({id: 'chat.placeHolder'})}\r\n                  showCloseButton= {true}\r\n                  fullScreenMode= {false}\r\n                \r\n                  autofocus= {true}\r\n                  handleQuickButtonClicked = {this.onQuickButtonClicked}\r\n               handleNewUserMessage={this.onUserMessage}/>\r\n            </Layout.Content>\r\n            <Layout>\r\n              <Layout.Footer><Powered/></Layout.Footer>\r\n            </Layout>\r\n            \r\n           \r\n          </Layout>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n//@action\r\ncheckMarketerOnline = ()=>\r\n{\r\n  const cuba = getCubaREST()!;\r\n  const COUNT_LIMIT = 2;\r\n  restServices.tagency_ChatService.isConnectedCustomerMarketerOnline(cuba)()\r\n    .then((value: string)=>{\r\n      const connected: boolean = JSON.parse(value) as boolean;\r\n    /* if(connected && !this.chatData.opened)\r\n     {\r\n       this.connectedCount = this.connectedCount % COUNT_LIMIT +1;\r\n       if (this.connectedCount == 1)\r\n        notifyConnected();\r\n     }*/\r\n      //console.debug(\"connected \"+connected+ \" typ\"+typeof connected)\r\n      //console.debug(\"market \"+this.markerterIsOnline)\r\n       if (this.markerterIsOnline !== connected)\r\n       {\r\n          this.markerterIsOnline = connected;\r\n          //console.debug('timeer '+this.messageTimer);\r\n          //console.debug('onilne '+this.markerterIsOnline);\r\n          let subtitle: string ;\r\n          //store.dispatch(toggleInputDisabled());\r\n          if (this.markerterIsOnline)\r\n          {\r\n            //this.chatData.reminder++;\r\n            //enableInput();\r\n            subtitle = 'chat.marketer.online';\r\n            if (this.messageTimer == undefined)\r\n              this.messageTimer = setInterval(()=>this.loadMessages(),6000);\r\n          }\r\n          else\r\n          {\r\n           // notifyDisconnected();\r\n            //this.chatData.reminder=0;\r\n            //disableInput();\r\n            subtitle ='chat.marketer.offline';\r\n            if (this.messageTimer != undefined)\r\n            {\r\n                clearInterval(this.messageTimer);\r\n                this.messageTimer =undefined;\r\n            }\r\n          }\r\n          this.chatData.subtitle = this.props.intl.formatMessage({id: subtitle});\r\n       }\r\n    })\r\n    .catch((er)=>console.error(er));\r\n}\r\n\r\n  messageIds: Array<string> = [];\r\n\r\n  @action\r\n  loadMessages = ()=> {\r\n    const cuba = getCubaREST()!;\r\n    restServices.tagency_ChatService.loadNewMessages(cuba)({groupId: this.chatGroupId, limit: 10})\r\n    .then((resp: string)=>{\r\n      const msgs:Array<Message>= JSON.parse(resp) ;\r\n    msgs.forEach((msg)=>{\r\n      if (this.messageIds.indexOf(msg.id)== -1)\r\n      {\r\n        this.messageIds.push(msg.id);\r\n        addResponseMessage(msg.content);\r\n        if (!this.chatData.opened)\r\n          this.chatData.badge++;\r\n      }\r\n      //console.debug('store '+);\r\n        //if(this.messageIds.indexOf(msg.id)===-1)\r\n        //showChat\r\n        \r\n        //console.debug(`message id ${msg.id}`)\r\n       restServices.tagency_ChatService.markAsRead(cuba)({messageIds: [msg.id]})\r\n      });\r\n      //console.debug(`mesages id ${msgs.keys()}`)\r\n    })\r\n    .catch((er)=>console.error(er))\r\n  }\r\n\r\n\r\nmessageTimer : any;\r\nonlineTimer : any;\r\n\r\nunsubscribeStore:()=>void;\r\n  componentDidMount()\r\n  {\r\n    this.onlineTimer = setInterval(()=>{\r\n      if (this.chatGroupId !== null)\r\n        this.checkMarketerOnline();\r\n    },30000);\r\n    this.unsubscribeStore= store.subscribe(()=>{\r\n      const opened  = isWidgetOpened();\r\n     //console.debug(`event ${store.getState().behavior}`);\r\n      if (this.chatData.opened != opened)\r\n      {\r\n        this.chatData.opened = opened;\r\n        if (opened)\r\n          this.chatData.badge=0;\r\n      }\r\n    });\r\n    disableInput();\r\n    //store.dispatch(toggleInputDisabled());\r\n  }\r\n\r\n  componentWillUnmount()\r\n  {\r\n    //clearInterval(this.messageTimer);\r\n    clearInterval(this.onlineTimer);\r\n    this.unsubscribeStore();\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction menuItem(\r\n  item: RouteItem | SubMenu,\r\n  keyString: string,\r\n  intl: IntlFormatters\r\n) {\r\n  // Sub Menu\r\n\r\n  if ((item as any).items != null) {\r\n    //recursively walk through sub menus\r\n    return (\r\n      <Menu.SubMenu\r\n        key={keyString}\r\n        title={intl.formatMessage({\r\n          id: \"router.\" + item.caption\r\n        })}\r\n      >\r\n        {(item as SubMenu).items.map((ri, index) =>\r\n          menuItem(ri, keyString + \"-\" + (index + 1), intl)\r\n        )}\r\n      </Menu.SubMenu>\r\n    );\r\n  }\r\n\r\n  // Route Item\r\n\r\n  const { menuLink } = item as RouteItem;\r\n\r\n  return (\r\n    <Menu.Item key={keyString}>\r\n      <NavLink to={menuLink}>\r\n        <Icon type=\"bars\" />\r\n        <FormattedMessage id={\"router.\" + item.caption} />\r\n      </NavLink>\r\n    </Menu.Item>\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\nfunction collectRouteItems(items: Array<RouteItem | SubMenu>): RouteItem[] {\r\n  return items.reduce(\r\n    (acc, curr) => {\r\n      if ((curr as SubMenu).items == null) {\r\n        // Route item\r\n        acc.push(curr as RouteItem);\r\n      } else {\r\n        // Items from sub menu\r\n        acc.push(...collectRouteItems((curr as SubMenu).items));\r\n      }\r\n      return acc;\r\n    },\r\n    [] as Array<RouteItem>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nconst App = injectIntl(AppComponent);\r\nexport default App;\r\n","import en from \"./en.json\";\r\n//import ru from \"./ru.json\";\r\nimport fr from \"./fr.json\";\r\nimport enUs from \"antd/es/locale/en_US\";\r\n//import ruRu from \"antd/es/locale/ru_RU\";\r\nimport frFr from \"antd/es/locale/fr_FR\";\r\n\r\nexport const antdLocaleMapping = {\r\n  en: enUs,\r\n  //ru: ruRu\r\n  fr : frFr\r\n};\r\n\r\nexport const messagesMapping = {\r\n  en: en,\r\n  //ru: ru\r\n  fr: fr\r\n};\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport App from \"./app/App\";\r\n// import registerServiceWorker from './registerServiceWorker';\r\nimport { CubaAppProvider } from \"@cuba-platform/react\";\r\n\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport { initializeApp } from \"@cuba-platform/rest\";\r\nimport { CUBA_APP_URL } from \"./config\";\r\n\r\nimport \"antd/dist/antd.min.css\";\r\nimport \"@cuba-platform/react/dist/index.min.css\";\r\nimport \"./index.css\";\r\nimport { antdLocaleMapping, messagesMapping } from \"./i18n/i18nMappings\";\r\nimport \"moment/locale/fr\";\r\n\r\nexport const cubaREST = initializeApp({\r\n  name: \"LLyciah Travel\",\r\n  apiUrl: CUBA_APP_URL,\r\n  storage: window.localStorage\r\n});\r\n\r\nReactDOM.render(\r\n  <CubaAppProvider\r\n    cubaREST={cubaREST}\r\n    messagesMapping={messagesMapping}\r\n    antdLocaleMapping={antdLocaleMapping}\r\n  >\r\n    <HashRouter>\r\n      <Route component={App} />\r\n    </HashRouter>\r\n  </CubaAppProvider>,\r\n  document.getElementById(\"root\") as HTMLElement\r\n);\r\n// registerServiceWorker();\r\n","export const CUBA_APP_URL = process.env.REACT_APP_CUBA_URL || \"/app/rest/\";\n\nexport const DEFAULT_COUNT = 10; // Typical amount of entities to be loaded on browse screens\n"],"sourceRoot":""}